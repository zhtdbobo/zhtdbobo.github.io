[{"categories":["部署"],"content":"[toc] 安装 ","date":"2023-11-17","objectID":"/gitea/:0:0","tags":["linux","gitea"],"title":"gitea","uri":"/gitea/"},{"categories":["部署"],"content":"安装mysql ","date":"2023-11-17","objectID":"/gitea/:0:1","tags":["linux","gitea"],"title":"gitea","uri":"/gitea/"},{"categories":["部署"],"content":"安装git v1 使用yum安装，最高版本是1.8.3.1 yum install -y git v2 添加 End Point Package Repository，进行安装 yum remove -y git yum install -y https://packages.endpointdev.com/rhel/7/os/x86_64/endpoint-repo.x86_64.rpm yum install -y git ","date":"2023-11-17","objectID":"/gitea/:0:2","tags":["linux","gitea"],"title":"gitea","uri":"/gitea/"},{"categories":["部署"],"content":"安装gitea 1.16.8版本 下载 wget -O gitea https://dl.gitea.io/gitea/1.16.8/gitea-1.16.8-linux-amd64 创建用户和组 groupadd git useradd git -g git 下载文件、配置权限 mkdir /home/gitea /var/log/gitea cd /home/gitea wget https://dl.gitea.io/gitea/1.16.8/gitea-1.16.8-linux-amd64 使用git用户登录，创建文件 mkdir custom/conf vim app.ini 配置权限 chmod +x gitea chown -R git:git /home/gitea/gitea /var/log/gitea 运行gitea 直接运行 ./gitea web 创建服务 创建服务文件 [Unit] Description=Gitea After=syslog.target After=network.target [Service] RestartSec=2s Type=simple User=git Group=git ExecStart=/home/gitea/gitea web --config /home/gitea/custom/conf/app.ini Restart=always [Install] WantedBy=multi-user.target 重新加载系统服务 systemctl daemon-reload 使用service service gitea stop service gitea start service gitea restart 2.39.3版本 配置 Q\u0026A ","date":"2023-11-17","objectID":"/gitea/:0:3","tags":["linux","gitea"],"title":"gitea","uri":"/gitea/"},{"categories":["部署"],"content":"[toc] 部署 ","date":"2023-11-13","objectID":"/nginx/:0:0","tags":["linux","nginx"],"title":"nginx","uri":"/nginx/"},{"categories":["部署"],"content":"下载 使用wget下载 下载到本地，上传到linux，解压缩 cd /home/用户 tar -zxvf nginx-1.24.0.tar.gz 安装依赖 yum install -y gcc-c++ pcre pcre-devel zlib zlib-devel openssl openssl-devel ","date":"2023-11-13","objectID":"/nginx/:0:1","tags":["linux","nginx"],"title":"nginx","uri":"/nginx/"},{"categories":["部署"],"content":"安装 进入nginx目录 cd nginx-1.24.0 配置，编译，安装 ./configure make make install ","date":"2023-11-13","objectID":"/nginx/:0:2","tags":["linux","nginx"],"title":"nginx","uri":"/nginx/"},{"categories":["部署"],"content":"运行 进入sbin目录 cd /usr/local/nginx/sbin ./nginx 验证 curl http://localhost:80 其他 ./nginx -s stop 关闭 ./nginx -s reload 重启 注册服务 编辑文件 vim /usr/lib/systemd/system/nginx.service 写入 内容 [Unit] Description=nginx After=network.target [Service] Type=forking ExecStart=/usr/local/nginx/sbin/nginx ExecReload=/bin/kill -s HUP $MAINPID ExecStop=/bin/kill -s QUIT $MAINPID PrivateTmp=true [Install] WantedBy=multi-user.target 说明 [Unit]:服务的说明 Description:描述服务 After:描述服务类别 [Service] 服务运行参数的设置 Type=forking 后台运行的形式 ExecStart 服务的具体运行命令 ExecReload 重启命令 ExecStop 停止命令 PrivateTmp=True 给服务分配独立的临时空间 注意：启动、重启、停止命令全部要求使用绝对路径 [Install] 服务安装的相关设置，可设置为多用户 刷新服务 systemctl daemon-reload 配置代理 修改nginx.conf http location / { root html; index index.html index.htm; proxy_pass http://127.0.0.1:端口; } websocket proxy_http_version 必须使用http 1.1 proxy_set_header、proxy_set_header必填固定 proxy_pass 协议写http，ip和port写ws访问的实际地址 location /接口名 { proxy_pass http://127.0.0.1:端口/接口名; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"upgrade\"; } 重启 cd /usr/local/nginx/sbin ./nginx -s reload Q\u0026A ","date":"2023-11-13","objectID":"/nginx/:0:3","tags":["linux","nginx"],"title":"nginx","uri":"/nginx/"},{"categories":["部署"],"content":"安装后出现403 打开nginx.conf 将首行的user nobody 改为 当前登录用户 ","date":"2023-11-13","objectID":"/nginx/:0:4","tags":["linux","nginx"],"title":"nginx","uri":"/nginx/"},{"categories":["sql"],"content":"[toc] 数据类型 ","date":"2023-11-09","objectID":"/redis%E5%91%BD%E4%BB%A4/:0:0","tags":["redis"],"title":"redis命令","uri":"/redis%E5%91%BD%E4%BB%A4/"},{"categories":["sql"],"content":"键(key) 查看当前库所有key (匹配：keys *1) keys * 判断某个key是否存在 exists key 查看你的key是什么类型 type key 删除指定的key数据 del key 根据value选择非阻塞删除 仅将keys从keyspace元数据中删除，真正的删除会在后续异步操作。 unlink key 10秒钟：为给定的key设置过期时间 expire key 10 查看还有多少秒过期，-1表示永不过期，-2表示已过期 ttl key 命令切换数据库 select 查看当前数据库的key的数量 dbsize 清空当前库 flushdb 通杀全部库 flushall ","date":"2023-11-09","objectID":"/redis%E5%91%BD%E4%BB%A4/:0:1","tags":["redis"],"title":"redis命令","uri":"/redis%E5%91%BD%E4%BB%A4/"},{"categories":["sql"],"content":"字符串(String) 简介 最基本的数据类型，一个key对应一个value，一个Redis中字符串value最多可以是512M 二进制安全的。意味着Redis的string可以包含任何数据。比如jpg图片或者序列化的对象。 常用命令 添加键值对 set \u003ckey\u003e \u003cvalue\u003e [EX seconds|PX miiliseconds|KEEPTTL] [NX|XX] NX：当数据库中key不存在时，可以将key-value添加数据库 XX：当数据库中key存在时，可以将key-value添加数据库，与NX参数互斥 EX：key的超时秒数 PX：key的超时毫秒数，与EX互斥 查询对应键值 get \u003ckey\u003e 将给定的value 追加到原值的末尾 append \u003ckey\u003e \u003cvalue\u003e 获得值的长度 strlen \u003ckey\u003e 只有在 key 不存在时，设置 key 的值 setnx \u003ckey\u003e \u003cvalue\u003e 将 key 中储存的数字值增1 只能对数字值操作，如果为空，新增值为1 incr \u003ckey\u003e 将 key 中储存的数字值减1 只能对数字值操作，如果为空，新增值为-1 decr \u003ckey\u003e 将 key 中储存的数字值增减。自定义步长。 incrby / decrby \u003ckey\u003e\u003c步长\u003e 获得值的范围，类似java中的substring，前包，后包 getrange \u003ckey\u003e \u003c起始位置\u003e \u003c结束位置\u003e 用 value 覆写key所储存的字符串值，从\u003c起始位置\u003e开始(索引从0开始)。 setrange \u003ckey\u003e \u003c起始位置\u003e \u003cvalue\u003e 设置键值的同时，设置过期时间，单位秒。 setex \u003ckey\u003e \u003c过期时间\u003e \u003cvalue\u003e 以新换旧，设置了新值同时获得旧值。 getset \u003ckey\u003e \u003cvalue\u003e 数据结构 简单动态字符串(Simple Dynamic String,缩写SDS)。 是可以修改的字符串，内部结构实现上类似于Java的ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配. ","date":"2023-11-09","objectID":"/redis%E5%91%BD%E4%BB%A4/:0:2","tags":["redis"],"title":"redis命令","uri":"/redis%E5%91%BD%E4%BB%A4/"},{"categories":["sql"],"content":"列表(List) 简介 单键多值 Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。 它的底层实际是个双向链表，对两端的操作性能很高，通过索引下标的操作中间的节点性能会较差。 常用命令 从左边/右边插入一个或多个值。 lpush/rpush \u003ckey\u003e\u003cvalue1\u003e\u003cvalue2\u003e\u003cvalue3\u003e .... 从左边/右边吐出一个值。值在键在，值光键亡。 lpop/rpop \u003ckey\u003e 从key1列表右边吐出一个值，插到key2列表左边。 rpoplpush \u003ckey1\u003e\u003ckey2\u003e 按照索引下标获得元素(从左到右) lrange \u003ckey\u003e\u003cstart\u003e\u003cstop\u003e lrange mylist 0 -1 0左边第一个，-1右边第一个，（0-1表示获取所有） 按照索引下标获得元素(从左到右) lindex \u003ckey\u003e \u003cindex\u003e 获得列表长度 llen \u003ckey\u003e 在value的后面插入newvalue插入值 linsert \u003ckey\u003e before \u003cvalue\u003e \u003cnewvalue\u003e 从左边删除n个value(从左到右) lrem \u003ckey\u003e \u003cn\u003e \u003cvalue\u003e 将列表key下标为index的值替换成value lset \u003ckey\u003e \u003cindex\u003e \u003cvalue\u003e 数据结构 List的数据结构为快速链表quickList。 ziplist 首先在列表元素较少的情况下会使用一块连续的内存存储，这个结构是ziplist，也即是压缩列表。 它将所有的元素紧挨着一起存储，分配的是一块连续的内存。 quicklist 也就是将多个ziplist使用双向指针串起来使用。这样既满足了快速的插入删除性能，又不会出现太大的空间冗余。 当数据量比较多的时候才会改成quicklist。 因为普通的链表需要的附加指针空间太大，会比较浪费空间。比如这个列表里存的只是int类型的数据，结构上还需要两个额外的指针prev和next。 ","date":"2023-11-09","objectID":"/redis%E5%91%BD%E4%BB%A4/:0:3","tags":["redis"],"title":"redis命令","uri":"/redis%E5%91%BD%E4%BB%A4/"},{"categories":["sql"],"content":"集合(Set) 简介 Set是string类型的无序集合。它底层其实是一个value为null的hash表，所以添加，删除，查找的复杂度都是O(1)。 set对外提供的功能与list类似是一个列表的功能， 特殊之处在于set是可以==自动排重==的，当你需要存储一个列表数据，又不希望出现重复数据时，set是一个很好的选择， set提供了判断某个成员是否在一个set集合内的重要接口，这个也是list所不能提供的。 常用命令 将一个或多个 member 元素加入到集合 key 中，已经存在的 member 元素将被忽略 sadd \u003ckey\u003e \u003cvalue1\u003e \u003cvalue2\u003e ..... 取出该集合的所有值。 smembers \u003ckey\u003e 判断集合key是否为含有该value值，有1，没有0 sismember \u003ckey\u003e \u003cvalue\u003e 返回该集合的元素个数。 scard \u003ckey\u003e 删除集合中的某个元素。 srem \u003ckey\u003e \u003cvalue1\u003e \u003cvalue2\u003e .... 随机从该集合中吐出一个值。 spop \u003ckey\u003e 随机从该集合中取出n个值。==不会从集合中删除== 。 srandmember \u003ckey\u003e\u003cn\u003e 把集合中一个值从一个集合移动到另一个集合 smove \u003csource\u003e\u003cdestination\u003evalue 返回两个集合的交集元素。 sinter \u003ckey1\u003e\u003ckey2\u003e 返回两个集合的并集元素。 sunion \u003ckey1\u003e\u003ckey2\u003e 返回两个集合的差集元素(key1中的，不包含key2中的) sdiff \u003ckey1\u003e\u003ckey2\u003e 数据结构 Set数据结构是dict字典，字典是用哈希表实现的。 Java中HashSet的内部实现使用的是HashMap，只不过所有的value都指向同一个对象。Redis的set结构也是一样，它的内部也使用hash结构，所有的value都指向同一个内部值 ","date":"2023-11-09","objectID":"/redis%E5%91%BD%E4%BB%A4/:0:4","tags":["redis"],"title":"redis命令","uri":"/redis%E5%91%BD%E4%BB%A4/"},{"categories":["sql"],"content":"哈希(Hash) 简介 键值对集合。 string类型的field和value的映射表，hash特别适合用于存储对象。 类似Java里面的Map\u003cString,Object\u003e 通过 key(用户ID) + field(属性标签) 就可以操作对应属性数据了，既不需要重复存储数据，也不会带来序列化和并发修改控制的问题 常用命令 给key集合中的 field键赋值value hset \u003ckey\u003e \u003cfield\u003e \u003cvalue\u003e 从key1集合field取出 value hget \u003ckey1\u003e \u003cfield\u003e 批量设置hash的值 hmset \u003ckey1\u003e\u003cfield1\u003e\u003cvalue1\u003e\u003cfield2\u003e\u003cvalue2\u003e... 查看哈希表 key 中，给定域 field 是否存在。 hexists\u003ckey1\u003e\u003cfield\u003e 列出该hash集合的所有field hkeys \u003ckey\u003e 列出该hash集合的所有value hvals \u003ckey\u003e 为哈希表 key 中的域 field 的值加上增量 1 -1 hincrby \u003ckey\u003e\u003cfield\u003e\u003cincrement\u003e 将哈希表 key 中的域 field 的值设置为 value ，当且仅当域 field 不存在 . hsetnx \u003ckey\u003e\u003cfield\u003e\u003cvalue\u003e 数据结构 Hash类型对应的数据结构是两种：ziplist（压缩列表），hashtable（哈希表）。 当field-value长度较短且个数较少时，使用ziplist，否则使用hashtable。 ","date":"2023-11-09","objectID":"/redis%E5%91%BD%E4%BB%A4/:0:5","tags":["redis"],"title":"redis命令","uri":"/redis%E5%91%BD%E4%BB%A4/"},{"categories":["sql"],"content":"有序集合Zset(sorted set) 简介 Redis有序集合zset与普通集合set非常相似，是一个没有重复元素的字符串集合。 不同之处是有序集合的每个成员都关联了一个评分（score）,这个评分（score）被用来按照从最低分到最高分的方式排序集合中的成员。 集合的成员是唯一的，但是评分可以是重复了 。 因为元素是有序的, 可以很快的根据评分（score）或者次序（position）来获取一个范围的元素。 访问有序集合的中间元素也是非常快的,能够使用有序集合作为一个没有重复成员的智能列表。 常用命令 将一个或多个 member 元素及其 score 值加入到有序集 key 当中。 zadd \u003ckey\u003e\u003cscore1\u003e\u003cvalue1\u003e\u003cscore2\u003e\u003cvalue2\u003e… 返回有序集 key 中，下标在start至stop之间的元素 zrange \u003ckey\u003e\u003cstart\u003e\u003cstop\u003e [WITHSCORES] 带WITHSCORES，可以让分数一起和值返回到结果集。 返回有序集 key 中，所有 score 值介于 min 和 max 之间(包括等于 min 或 max )的成员。 有序集成员按 score 值递增(从小到大)次序排列。 zrangebyscore key minmax [withscores] [limit offset count] 同上，改为从大到小排列。 zrevrangebyscore key maxmin [withscores] [limit offset count] 为元素的score加上增量 zincrby \u003ckey\u003e\u003cincrement\u003e\u003cvalue\u003e 删除该集合下，指定值的元素 zrem \u003ckey\u003e\u003cvalue\u003e 统计该集合，分数区间内的元素个数 zcount \u003ckey\u003e\u003cmin\u003e\u003cmax\u003e 返回该值在集合中的排名，从0开始。 zrank \u003ckey\u003e\u003cvalue\u003e 案例：如何利用zset实现一个文章访问量的排行榜？ 数据结构 SortedSet(zset)是Redis提供的一个非常特别的数据结构， 一方面它等价于Java的数据结构Map\u003cString, Double\u003e，可以给每一个元素value赋予一个权重score 另一方面它又类似于TreeSet，内部的元素会按照权重score进行排序，可以得到每个元素的名次，还可以通过score的范围来获取元素的列表。 zset底层使用了两个数据结构 hash，hash的作用就是关联元素value和权重score，保障元素value的唯一性，可以通过元素value找到相应的score值。 跳跃表，跳跃表的目的在于给元素value排序，根据score的范围获取元素列表。 有序集合在生活中比较常见，例如根据成绩对学生排名，根据得分对玩家排名等。对于有序集合的底层实现，可以用数组、平衡树、链表等。数组不便元素的插入、删除；平衡树或红黑树虽然效率高但结构复杂；链表查询需要遍历所有效率低。Redis采用的是跳跃表。跳跃表效率堪比红黑树，实现远比红黑树简单。 对比有序链表和跳跃表，从链表中查询出51 有序链表 要查找值为51的元素，需要从第一个元素开始依次查找、比较才能找到。共需要6次比较。 跳跃表 从第2层开始，1节点比51节点小，向后比较。 21节点比51节点小，继续向后比较，后面就是NULL了，所以从21节点向下到第1层 在第1层，41节点比51节点小，继续向后，61节点比51节点大，所以从41向下 在第0层，51节点为要查找的节点，节点被找到，共查找4次。 从此可以看出跳跃表比有序链表效率要高 特性 ","date":"2023-11-09","objectID":"/redis%E5%91%BD%E4%BB%A4/:0:6","tags":["redis"],"title":"redis命令","uri":"/redis%E5%91%BD%E4%BB%A4/"},{"categories":["sql"],"content":"原子性 原子操作是指不会被线程调度机制打断的操作； 这种操作一旦开始，就一直运行到结束，中间不会有任何 context switch （切换到另一个线程）。 在单线程中， 能够在单条指令中完成的操作都可以认为是\"原子操作\"，因为中断只能发生于指令之间。 在多线程中，不能被其它进程（线程）打断的操作就叫原子操作。 Redis单命令的原子性主要得益于Redis的单线程。 ==原子性，有一个失败则都失败== ","date":"2023-11-09","objectID":"/redis%E5%91%BD%E4%BB%A4/:0:7","tags":["redis"],"title":"redis命令","uri":"/redis%E5%91%BD%E4%BB%A4/"},{"categories":["sql"],"content":"[toc] 存储过程procedure ","date":"2023-11-06","objectID":"/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%92%8C%E8%A7%A6%E5%8F%91%E5%99%A8/:0:0","tags":["procedure","trigger"],"title":"触发器和存储过程","uri":"/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%92%8C%E8%A7%A6%E5%8F%91%E5%99%A8/"},{"categories":["sql"],"content":"创建存储过程 create procedure mypro(in a int,in b int,out sum int) begin set sum = a+b; end; call mypro(1,2,@s);-- 调用存储过程 select @s;-- 显示过程输出结果 call用来调用过程，@s 是用来接收过程输出参数的变量， ","date":"2023-11-06","objectID":"/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%92%8C%E8%A7%A6%E5%8F%91%E5%99%A8/:0:1","tags":["procedure","trigger"],"title":"触发器和存储过程","uri":"/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%92%8C%E8%A7%A6%E5%8F%91%E5%99%A8/"},{"categories":["sql"],"content":"存储过程的参数 IN 输入参数：表示调用者向过程传入值（可以是字面量或变量） OUT 输出参数：表示过程向调用者传出值(可返回多个值只能是变量） INOUT输入输出参数：既表示调用者向过程传入值，又表示过程向调用者传出值（值只能是变量） ","date":"2023-11-06","objectID":"/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%92%8C%E8%A7%A6%E5%8F%91%E5%99%A8/:0:2","tags":["procedure","trigger"],"title":"触发器和存储过程","uri":"/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%92%8C%E8%A7%A6%E5%8F%91%E5%99%A8/"},{"categories":["sql"],"content":"存储过程根据参数可分为四种类别： 没有参数 只有输入参数 只有输出参数 输入和输出 ","date":"2023-11-06","objectID":"/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%92%8C%E8%A7%A6%E5%8F%91%E5%99%A8/:0:3","tags":["procedure","trigger"],"title":"触发器和存储过程","uri":"/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%92%8C%E8%A7%A6%E5%8F%91%E5%99%A8/"},{"categories":["sql"],"content":"变量定义 declare name varchar(20) default ‘jack’ declare用于声明变量 default用于声明默认值 ","date":"2023-11-06","objectID":"/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%92%8C%E8%A7%A6%E5%8F%91%E5%99%A8/:0:4","tags":["procedure","trigger"],"title":"触发器和存储过程","uri":"/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%92%8C%E8%A7%A6%E5%8F%91%E5%99%A8/"},{"categories":["sql"],"content":"变量赋值 使用 schooldb 数据库 use schooldb; 创建过程 create procedure mypro1() begin declare name varchar(20); set name = '丘处机'; select * from studentinfo where studentname = name; end; 调用过程 call mypro1(); ","date":"2023-11-06","objectID":"/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%92%8C%E8%A7%A6%E5%8F%91%E5%99%A8/:0:5","tags":["procedure","trigger"],"title":"触发器和存储过程","uri":"/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%92%8C%E8%A7%A6%E5%8F%91%E5%99%A8/"},{"categories":["sql"],"content":"If条件语句 创建过程 create procedure mypro2(in num int) begin if num\u003c0 then -- 条件开始 select '负数'; elseif num=0 then select '不是正数也不是负数'; else select '正数'; end if;-- 条件结束 end; 调用过程 call mypro2(-1); ","date":"2023-11-06","objectID":"/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%92%8C%E8%A7%A6%E5%8F%91%E5%99%A8/:0:6","tags":["procedure","trigger"],"title":"触发器和存储过程","uri":"/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%92%8C%E8%A7%A6%E5%8F%91%E5%99%A8/"},{"categories":["sql"],"content":"Case条件语句 创建过程 create procedure mypro3(in num int) begin case -- 条件开始 when num\u003c0 then select '负数'; when num=0 then select '不是正数也不是负数'; else select '正数'; end case; -- 条件结束 end; 调用过程 call mypro3(1); ","date":"2023-11-06","objectID":"/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%92%8C%E8%A7%A6%E5%8F%91%E5%99%A8/:0:7","tags":["procedure","trigger"],"title":"触发器和存储过程","uri":"/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%92%8C%E8%A7%A6%E5%8F%91%E5%99%A8/"},{"categories":["sql"],"content":"While循环语句 创建过程 create procedure mypro5(out sum int) begin declare num int default 0; set sum = 0; while num\u003c10 do -- 循环开始 set num = num+1; set sum = sum+num; end while; -- 循环结束 end; 调用过程 call mypro5(@sum); 查询变量值 select @sum; ","date":"2023-11-06","objectID":"/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%92%8C%E8%A7%A6%E5%8F%91%E5%99%A8/:0:8","tags":["procedure","trigger"],"title":"触发器和存储过程","uri":"/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%92%8C%E8%A7%A6%E5%8F%91%E5%99%A8/"},{"categories":["sql"],"content":"Repeat循环语句（和do…while类似） 创建过程 create procedure mypro6(out sum int) begin declare num int default 0; set sum = 0; repeat-- 循环开始 set num = num+1; set sum = sum+num; until num\u003e=10 end repeat; -- 循环结束 end; 调用过程 call mypro6(@sum); 查询变量值 select @sum; ","date":"2023-11-06","objectID":"/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%92%8C%E8%A7%A6%E5%8F%91%E5%99%A8/:0:9","tags":["procedure","trigger"],"title":"触发器和存储过程","uri":"/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%92%8C%E8%A7%A6%E5%8F%91%E5%99%A8/"},{"categories":["sql"],"content":"Loop循环语句 leave相当于break，用来终止循环； iterate相当于 continue，用来结束本次循环操作 创建过程 create procedure mypro7(out sum int) begin declare num int default 0; set sum = 0; loop_sum:loop-- 循环开始 set num = num+1; set sum = sum+num; if num\u003e=10 then leave loop_sum; end if; end loop loop_sum; -- 循环结束 end; 调用过程 call mypro7(@sum); 查询变量值 select @sum; 触发器trigger ","date":"2023-11-06","objectID":"/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%92%8C%E8%A7%A6%E5%8F%91%E5%99%A8/:0:10","tags":["procedure","trigger"],"title":"触发器和存储过程","uri":"/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%92%8C%E8%A7%A6%E5%8F%91%E5%99%A8/"},{"categories":["sql"],"content":"定义 特殊的存储过程。不同的是，触发器无需人工调用，当程序满足定义条件时就会被MySQL自动调用。这些条件可以称为触发事件，包括：INSERT、UPDATE和DELETE操作。 ","date":"2023-11-06","objectID":"/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%92%8C%E8%A7%A6%E5%8F%91%E5%99%A8/:0:11","tags":["procedure","trigger"],"title":"触发器和存储过程","uri":"/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%92%8C%E8%A7%A6%E5%8F%91%E5%99%A8/"},{"categories":["sql"],"content":"创建触发器 CREATE TRIGGER trigger_name trigger_time trigger_event ON table_name FOR EACH ROW trigger_body trigger_time：触发器触发时机，有before和after trigger_event：触发器触发事件insert,update,delete trigger_body：触发器主体语句 ","date":"2023-11-06","objectID":"/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%92%8C%E8%A7%A6%E5%8F%91%E5%99%A8/:0:12","tags":["procedure","trigger"],"title":"触发器和存储过程","uri":"/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%92%8C%E8%A7%A6%E5%8F%91%E5%99%A8/"},{"categories":["sql"],"content":"After触发器 指触发器监视的触发事件执行之后，再激活触发器，激活后所执行的操作无法影响触发器所监视的事件。 New和old：指insert,delete,update操作执行前（后）所在表状态 Insert-只有new合法。新插入的行用new来表示，行中每一列的值用new.列名来表示 delete-只有old合法。删除的行用old来表示，行中每一列的值用old.列名来表示 update-被修改的行。修改前的数据（用old来表示，old.列名）修改后的数据（用new来表示，new.列名） Delete触发器 创建一个触发器t_d_s，当删除表student中某个学生的信息时，同时将grade表中与该学生有关的数据全部删除 CREATE TRIGGER trigger_t1 AFTER DELETE ON student FOR EACH ROW BEGIN DELETE FROM grade WHERE studentid = old.studentid; END Update触发器 创建一触发器t_u_s，实现在更新学生表的学号时，同时更新grade表中的相关记录的studentid值 CREATE TRIGGER t_u_s AFTER UPDATE ON student for EACH ROW BEGIN UPDATE grade SET studentid = new.studentid WHERE studentid = old.studentid; END Insert触发器 创建一个触发器t_i_s，当student表插入新学生时，class表中该班级人数加1 CREATE TRIGGER t_i_s AFTER INSERT ON student for EACH ROW BEGIN UPDATE class SET studentnum = studentnum + 1 WHERE classid = new.classid; END; ","date":"2023-11-06","objectID":"/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%92%8C%E8%A7%A6%E5%8F%91%E5%99%A8/:0:13","tags":["procedure","trigger"],"title":"触发器和存储过程","uri":"/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%92%8C%E8%A7%A6%E5%8F%91%E5%99%A8/"},{"categories":["sql"],"content":"Before触发器 指触发器在所监视的触发事件执行之前激活，激活后执行的操作先于监视的事件，这样就有机会进行一些判断，或修改即将发生的操作 before：(insert、update)可以对new进行修改 after不能对new进行修改，三者都不能修改old数据 Insert触发器: 建一个触发器t_d_t，插入教师信息时，如果教师工资小于3000，则自动调整成3000 CREATE TRIGGER tdt BEFORE INSERT ON teacher for each ROW BEGIN if new.salary \u003c3000 THEN SET new.salary = 3000; END if; END; Update触发器 给grade表建立一个学分列，并创建一个触发器，当修改grade表中数据时，如果修改后的成绩小于60分，则触发器将该成绩对应的课程学分修改为0，否则将学分改成对应课程的学分 ALTER TABLE grade ADD credit int; CREATE TRIGGER trigger_ch BEFORE UPDATE ON grade FOR EACH ROW BEGIN IF new.grade\u003c60 THEN SET new.credit = 0; ELSE SET new.credit = ( SELECT credit FROM coure WHERE courseid = new.courseid ); END if; END UPDATE grade SET grade = 50 WHERE courseid =\"Dp010001\" AND studentid = \"St0109010003\" ","date":"2023-11-06","objectID":"/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%92%8C%E8%A7%A6%E5%8F%91%E5%99%A8/:0:14","tags":["procedure","trigger"],"title":"触发器和存储过程","uri":"/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%92%8C%E8%A7%A6%E5%8F%91%E5%99%A8/"},{"categories":["sql"],"content":"中断触发器 假设软件B1802班级最多只能有4个人，当往b_student表中增加新生信息时，b_class班级表内学生人数会随之增加，当人数大于4人时，由于超过人数限制，会报系统错误，错误提示为“超过人数限制”，并且该触发器所有操作（包括引发触发器的操作）均不能成功 创建b_classs表存放班级人数，如果班级人数大于4就提示\"超出人数限制\" CREATE TABLE B_class( Cid VARCHAR(20) PRIMARY KEY COMMENT \"班级名称\", num int COMMENT \"人数\" ); 插入初始数值，初始数值软件B1802班没有人 INSERT INTO b_class VALUES(\"软件B1802\",0); 创建一个b_student表存放学生信息 CREATE TABLE b_student( studentid VARCHAR(20) PRIMARY KEY COMMENT \"学号\", studentname VARCHAR(20) not null COMMENT \"姓名\", classid VARCHAR(20) DEFAULT '软件B1802' COMMENT \"班级\", CONSTRAINT FK_ID FOREIGN KEY(classid) REFERENCES B_class(Cid) ON DELETE RESTRICT on UPDATE CASCADE )DEFAULT CHARSET = utf8; 要注意的是，我们在插入学生信息的时候，我们要使用触发器来更新班级表中的人数，不然尽管你在学生信息表插入多条数据，班级表中的人数会一直保持不表，也就不会出现超出人数限制的情况。 CREATE TRIGGER add_trigger AFTER INSERT ON b_student for EACH ROW BEGIN UPDATE b_class SET num = num + 1 WHERE Cid = new.classid; END; 创建抛出自定义异常的触发器，当插入学生人数超过4人时，就会抛出异常。 CREATE TRIGGER exception BEFORE INSERT ON b_student for each row BEGIN； DECLARE number int; SELECT num INTO number from b_class WHERE cid = new.classid; if number = 4 THEN SIGNAL SQLSTATE '45000' SET message_text = '超出人数限制',MYSQL_ERRNO = 1333; END if; END; INSERT INTO b_student(studentid,studentname) VALUES('238','位傲气'),('239','阮氏问'),('240','王陇镇'),('250','周志豪'); INSERT INTO b_student(studentid,studentname) VALUES('241','刘洋'); ","date":"2023-11-06","objectID":"/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%92%8C%E8%A7%A6%E5%8F%91%E5%99%A8/:0:15","tags":["procedure","trigger"],"title":"触发器和存储过程","uri":"/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%92%8C%E8%A7%A6%E5%8F%91%E5%99%A8/"},{"categories":["python"],"content":"[toc] 创建项目 ","date":"2023-11-01","objectID":"/django/:0:0","tags":["django"],"title":"django","uri":"/django/"},{"categories":["python"],"content":"支持websocket 版本 python：3.7 django：3.2.22 channels: 3.0.0 安装依赖 pip install channels == 3.2.22 pip install django == 3.0.0 创建app 添加成功会显示一个新的app的文件夹 命令行 python manage.py startapp app名字 添加consumers.py from channels.generic.websocket import WebsocketConsumer from channels.exceptions import StopConsumer class ChatConsumer(WebsocketConsumer): def websocket_connect(self, message): # 有客户端来向后端发送websocket连接的请求时，自动触发。 # 服务端允许和客户端创建连接。 self.accept() def websocket_receive(self, message): # 浏览器基于websocket向后端发送数据，自动触发接收消息。 print(message) self.send(\"小天：\\n\\t\" + message['text']) # self.close() def websocket_disconnect(self, message): # 客户端与服务端断开连接时，自动触发。 print(\"断开连接\") raise StopConsumer() 配置项目的routing.py 修改setting.py 修改INSTALLED_APPS加上自己新建的app 指定websocket使用asgi网关 INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'channels', 'app', ] ASGI_APPLICATION = \"ws.asgi.application\" 修改允许其他电脑访问 ALLOWED_HOSTS = [\"*\"] 新建routing.py 和项目的setting.py同级 from django.urls import re_path from app import consumers websocket_urlpatterns = [ re_path(\"^test\", consumers.ChatConsumer.as_asgi()), ] 修改asgi.py asgi网关（异步服务）配置访问访问http和websocket import os from . import routing from channels.routing import ProtocolTypeRouter, URLRouter from django.core.asgi import get_asgi_application os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ws.settings') application = ProtocolTypeRouter({ \"http\": get_asgi_application(), \"websocket\": URLRouter(routing.websocket_urlpatterns), }) 执行项目 ","date":"2023-11-01","objectID":"/django/:0:1","tags":["django"],"title":"django","uri":"/django/"},{"categories":["python"],"content":"运行 迁移 python manage.py migrate 执行 本地访问 python manage.py runserver 端口号 其他电脑访问 python manage.py runserver 0.0.0.0:端口号 截图 ","date":"2023-11-01","objectID":"/django/:0:2","tags":["django"],"title":"django","uri":"/django/"},{"categories":["python"],"content":"测试 截图 ","date":"2023-11-01","objectID":"/django/:0:3","tags":["django"],"title":"django","uri":"/django/"},{"categories":["软考"],"content":"[toc] 黑盒测试 ","date":"2023-10-31","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AF%84%E6%B5%8B%E5%B8%88%E4%B8%8B%E5%8D%88%E9%A2%98/:0:0","tags":null,"title":"软件评测师下午题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AF%84%E6%B5%8B%E5%B8%88%E4%B8%8B%E5%8D%88%E9%A2%98/"},{"categories":["软考"],"content":"测试方法有哪些不足 ==无法体现==出C、A/B之间的制约关系，比如当满足A/B（转换后对应的点数满足），但不满足C（乘机次数）的情况 ==没有考虑==手机端的情况，题干中B的数值都为0 白盒测试 ","date":"2023-10-31","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AF%84%E6%B5%8B%E5%B8%88%E4%B8%8B%E5%8D%88%E9%A2%98/:0:1","tags":null,"title":"软件评测师下午题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AF%84%E6%B5%8B%E5%B8%88%E4%B8%8B%E5%8D%88%E9%A2%98/"},{"categories":["软考"],"content":"逻辑覆盖 语句覆盖：所有的语句都执行一遍 判定覆盖：判定的真假都走一遍 假设条件a、条件b、条件c、条件d 问：请针对上述C程序给出满足100%DC (判定覆盖)所需的逻辑条件。 答： 条件a，条件a的反面 条件b，条件b的反面 条件c，条件c的反面 条件d，条件d的反面 条件覆盖：判定中包含多条件，需要进行拆分 条件判定覆盖： 修正的条件判定覆盖 条件组合覆盖 ","date":"2023-10-31","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AF%84%E6%B5%8B%E5%B8%88%E4%B8%8B%E5%8D%88%E9%A2%98/:0:2","tags":null,"title":"软件评测师下午题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AF%84%E6%B5%8B%E5%B8%88%E4%B8%8B%E5%8D%88%E9%A2%98/"},{"categories":["软考"],"content":"控制流图 环路复杂度 边-点+2（推荐） 判定节点+1 环型复杂度（尽量不用） 线性无关路径 控制流图的角度：一条线性无关路径是至少包含有一条 在其他线性无关路径中从未有过的边的路径 技巧：写一条线性无关路径就把经过的边进行标记 性能测试 该软件公司在负载压力测试中没有进行功能校验，忽略了负载压力情况下的功能不稳定问题。没有正确的功能保证，负载压力性能测试就失去了意义。 在测试过程中进行功能校验，需要记录业务操作结果，会导致资源消耗、操作行为增加以及产生大量日志等问题 ","date":"2023-10-31","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AF%84%E6%B5%8B%E5%B8%88%E4%B8%8B%E5%8D%88%E9%A2%98/:0:3","tags":null,"title":"软件评测师下午题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AF%84%E6%B5%8B%E5%B8%88%E4%B8%8B%E5%8D%88%E9%A2%98/"},{"categories":["软考"],"content":"负载测试 通过逐步增加系统负载，测试系统性能的变化，并最终确定在满足性能指标的情况下，系统所能承受的最大负载量的测试 如：系统在多大的并发访问用户数量下，响应时间不可接受（例如超过2s）。 ","date":"2023-10-31","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AF%84%E6%B5%8B%E5%B8%88%E4%B8%8B%E5%8D%88%E9%A2%98/:0:4","tags":null,"title":"软件评测师下午题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AF%84%E6%B5%8B%E5%B8%88%E4%B8%8B%E5%8D%88%E9%A2%98/"},{"categories":["软考"],"content":"压力测试 通过逐步增加系统负载，测试系统性能的变化，并最终确定在什么负载条件下系统性能处于失效状态，并以此来获得系统能提供的最大服务级别的测试 如：系统在多大的并发访问用户数量下，响应时间不可接受（例如超过2s）。 ","date":"2023-10-31","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AF%84%E6%B5%8B%E5%B8%88%E4%B8%8B%E5%8D%88%E9%A2%98/:0:5","tags":null,"title":"软件评测师下午题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AF%84%E6%B5%8B%E5%B8%88%E4%B8%8B%E5%8D%88%E9%A2%98/"},{"categories":["软考"],"content":"并发性能测试 ","date":"2023-10-31","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AF%84%E6%B5%8B%E5%B8%88%E4%B8%8B%E5%8D%88%E9%A2%98/:0:6","tags":null,"title":"软件评测师下午题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AF%84%E6%B5%8B%E5%B8%88%E4%B8%8B%E5%8D%88%E9%A2%98/"},{"categories":["软考"],"content":"疲劳强度测试 ","date":"2023-10-31","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AF%84%E6%B5%8B%E5%B8%88%E4%B8%8B%E5%8D%88%E9%A2%98/:0:7","tags":null,"title":"软件评测师下午题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AF%84%E6%B5%8B%E5%B8%88%E4%B8%8B%E5%8D%88%E9%A2%98/"},{"categories":["软考"],"content":"大数据量测试 ","date":"2023-10-31","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AF%84%E6%B5%8B%E5%B8%88%E4%B8%8B%E5%8D%88%E9%A2%98/:0:8","tags":null,"title":"软件评测师下午题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AF%84%E6%B5%8B%E5%B8%88%E4%B8%8B%E5%8D%88%E9%A2%98/"},{"categories":["软考"],"content":"应用性能指数Apdex Apdex响应指数分为三个等级 满足：响应时间小于或等于T。 容许：响应时间大于T且小于或等于4T 沮丧：响应时间大于4T或请求返回服务器端错误。 计算方式 $$Apdex =\\frac{满足样本+ 0.5\\times容许样本+ 0\\times沮丧样本}{总样本}$$ web测试 ","date":"2023-10-31","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AF%84%E6%B5%8B%E5%B8%88%E4%B8%8B%E5%8D%88%E9%A2%98/:0:9","tags":null,"title":"软件评测师下午题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AF%84%E6%B5%8B%E5%B8%88%E4%B8%8B%E5%8D%88%E9%A2%98/"},{"categories":["软考"],"content":"表单测试 测试内容 每个字段的验证 字段的缺省值 表单中的输入 提交操作的完整性 兼容性测试 类型 平台兼容性 浏览器兼容性 兼容性矩阵 sql注入 本题中给出的SQL语句不能防止SQL注入，设置的这个测试用例只要包含SQL功能符号，然后使得SQL语句不符合原设计意图即可。例如，包含了“–”或“’”等，那么整个语句为： 将intClientSubmitScore为85 DELETE FROM score – ；strStudentID为1000 这样SQL语句执行就变成：UPDATE StudentScore SET score =85 DELETE FROM score – WHERE Stuent_ID= 1000 ; 防止SQL注入的有些方法主要有：拼接SQL之前先对特殊符合进行转义，使其不作为SQL的功能符合即可 安全性测试 ","date":"2023-10-31","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AF%84%E6%B5%8B%E5%B8%88%E4%B8%8B%E5%8D%88%E9%A2%98/:0:10","tags":null,"title":"软件评测师下午题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AF%84%E6%B5%8B%E5%B8%88%E4%B8%8B%E5%8D%88%E9%A2%98/"},{"categories":["软考"],"content":"稳定性与可靠性 故障恢复 整个系统是否存在单点故障； 对于关键性应用系统，当任何一台设备失效时，按照预先定义的规则是否能够快速切换； 是否采用磁盘镜像技术，实现主机系统到磁盘系统的高速连接 数据备份 对于关键的业务，是否具备必要的热备份机制，例如双机热备份、磁盘镜像等 对于所有业务，是否提供磁带备份和恢复机制，保证系统能根据备份策略恢复到指定时间的状态 容灾备份 可否建立异地容灾备份中心，当主中心发生灾难事件时，由备份中心接管所有的业务； 备份中心是否有足够的带宽确保与主中心的数据同步，有足够的处理能力来接管主中心的业务，能否确保快速可靠地与主中心的应用切换 ","date":"2023-10-31","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AF%84%E6%B5%8B%E5%B8%88%E4%B8%8B%E5%8D%88%E9%A2%98/:0:11","tags":null,"title":"软件评测师下午题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AF%84%E6%B5%8B%E5%B8%88%E4%B8%8B%E5%8D%88%E9%A2%98/"},{"categories":["软考"],"content":"加密 加密机制是保护数据安全的重要手段，加密的基本过程就是对原来明文的文件或数据，按某种算法进行处理，使其成为不可读的一段代码——密文，使其只能在输入相应的密钥之后才能显示出明文内容，通过这样的途径来达到保护数据不被非法窃取、阅读的目的。不同加密机制或密码函数的用途、强度是不相同的，一个软件或系统中的加密机制使用得是否合理，强度是否满足当前需求，是需要通过测试来完成的，通常模拟解密是测试的一个重要手段。 数据库权限管理测试 应用软件部署后，数据库管理用户的设置应当注意对账号的保护，超级用户的口令不得为空或默认口令。对数据库的账号和组的权限作相应设置，如锁定一些默认的数据库用户；撤销不必要的权限。 数据库中关于应用软件用户权限和口令存储的相关表格，尽量采用加密算法进行加密 软件企业在进行软件产品开发时，开发人员通常为了开发方便，在客户端与数据库通信时，均使用超级用户及默认密码访问数据库，这种方式将会带来严重的安全隐患，测试人员可以通过网络侦听的技术，或使用白盒测试方法进行测试，并且应当建议开发者，根据不同程序访问数据库的功能，使用不同的数据库用户进行连接，且必须设置复杂的密码 ","date":"2023-10-31","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AF%84%E6%B5%8B%E5%B8%88%E4%B8%8B%E5%8D%88%E9%A2%98/:0:12","tags":null,"title":"软件评测师下午题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AF%84%E6%B5%8B%E5%B8%88%E4%B8%8B%E5%8D%88%E9%A2%98/"},{"categories":["软考"],"content":"安全防护策略 安全日志 安全日志是记录非法用户的登录名称、操作时间及内容等信息，以便于发现问题并提出解决措施。安全日志仅记录相关信息，不对非法行为作出主动反应，属于被动防护的策略 入侵检测 入侵检测系统是一种主动的网络安全防护措施，从系统内部和各种网络资源中主动采集信息，从中分析可能的网络入侵或攻击。一般来说，入侵检测系统还应对入侵行为作出紧急响应。入侵检测被认为是防火墙之后的第二道安全闸门，在不影响网络性能的情况下能对网络进行检测，从而提供对内部攻击，外部攻击和误操作的实时保护。 隔离防护 隔离防护是将系统中的安全部分与非安全部分进行隔离的措施，目前采用的技术主要有两种，即隔离网闸和防火墙，隔离网闸主要目的在于实现内网和外面的物理隔离，防火墙主要用于内网和外网的逻辑隔离 漏洞扫描 漏洞扫描就是对软件系统及网络系统进行与安全相关的检测，以找出安全隐患和可被黑客利用的漏洞，同时漏洞扫描技术也是安全性测试的一项必要手段 防火墙 是否支持交换和路由两种工作模式 是否支持对HTTP、FTP、SMTP等服务类型的访问控制 是否考虑到防火墙的冗余设计 是否支持对日志的统计分析功能，同时，日志是否可以存储在本地和网络数据库上 对防火墙本身或受保护网段的非法攻击系统，是否提供多种告警方式以及多种级别的告警 ","date":"2023-10-31","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AF%84%E6%B5%8B%E5%B8%88%E4%B8%8B%E5%8D%88%E9%A2%98/:0:13","tags":null,"title":"软件评测师下午题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AF%84%E6%B5%8B%E5%B8%88%E4%B8%8B%E5%8D%88%E9%A2%98/"},{"categories":["软考"],"content":"案例 入侵检测系统 能否在检测到入侵事件时，自动执行切断服务、记录入侵过程、邮件报警等动作 是否支持攻击特征信息的集中式发布和攻击取证信息的分布式上载 能否提供多种方式对监视引擎和检测特征的定期更新服务 内置的网络能否使用状况监控工具和网络监听工具 嵌入式测试 ","date":"2023-10-31","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AF%84%E6%B5%8B%E5%B8%88%E4%B8%8B%E5%8D%88%E9%A2%98/:0:14","tags":null,"title":"软件评测师下午题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AF%84%E6%B5%8B%E5%B8%88%E4%B8%8B%E5%8D%88%E9%A2%98/"},{"categories":["软考"],"content":"可靠性测试 软件可靠性 含义 可靠性是指产品在规定的条件下和规定的时间内完成规定功能的能力或者在指定条件下使用时，软件产品维持规定的性能级别的能力 影响因素 运行剖面（环境） 软件可靠性的定义是相对运行环境而言的，一样的软件在不同的运行剖面下，其可靠性的表现是不一样的。 软件规模 也就是软件的大小，一个只有数十行代码的软件和几千行代码的软件是不能相提并论的。 软件内部结构 结构对软件可靠性的影响主要取决于软件结构的复杂程度，一般来说，内部结构越复杂的软件，所包含的软件缺陷数就可能越多。 软件的开发方法和开发环境 软件工程表明，软件的开发方法对软件的可靠性有显著影响，例如，与非结构化方法相比，结构化方法可以明显减少软件的缺陷数。 软件可靠性的投入 评价 软件可靠度R（t）和软件失效概率之间的关系为R（t）=1-F（t） 失效概率 软件从运行开始，到某一个时刻为止，出现失效的概率。如果将失效的概率看作关于软件运行时间的一个随机函数，用F（t）表示。函数F（t）具有如下特征：F（0）=0，即软件运行初始时刻失效概率为0；F（t）在时间域（0，+∞）上是单调递增的；F（+∞）=1，即失效概率在运行时间不断增长时趋向于1 可靠度 是软件系统在规定的条件下，规定的时间内不发生失效的概率。如果用F（t）来表示到t时刻为止，软件不出现失效的概率，则可靠度的公式为R（t）=1-F（t） 平均无失效时间 是软件运行后，到下一次出现失效的平均时间。通常平均无失效时间更能直观地表明一个软件的可靠程度 面向对象测试 ","date":"2023-10-31","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AF%84%E6%B5%8B%E5%B8%88%E4%B8%8B%E5%8D%88%E9%A2%98/:0:15","tags":null,"title":"软件评测师下午题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AF%84%E6%B5%8B%E5%B8%88%E4%B8%8B%E5%8D%88%E9%A2%98/"},{"categories":["软考"],"content":"类之间的关系 依赖关系 概念 假设有两个类，类A和类B，类A的某个==成员方法的参数==有类B，说明类A使用了类B，类A依赖类B，依赖关系即uses-a关系，依赖关系除了被依赖方作为依赖方的方法参数，还可能作为依赖方的==方法返回值==存在，这些都是依赖关系的表现形式 依赖关系使用虚线箭头表示，依赖方指向被依赖方 关联关系 概念 关联关系是一种==强依赖==的关系，假设有两个类，类A和类B，类B作为类A的==成员变量==存在，类A也可为类B的成员变量存在，如果互为成员变量则为双向依赖，否则为单向依赖 单向关联和双向关联 单向关联为单向实线箭头 双向关联是一条实线，没有箭头 与依赖关系的区别 依赖关系是一种临时的关系，依赖关系主要体现在方法参数，当调用方法时才有关系，关联关系是一种长期的关系，主体现在成员变量，无论是否调用方法这种关系都存在 聚合关系 概念 聚合关系是一种has-a关系，假设有两个类，类A和类B，类A包含类B，类B是类A的成员变量，聚合关系和关联关系都体现在成员变量，它们的区别在于：关联关系双方是平级的，是个体和个体的关系，聚合关系双方不是平级的，是==整体和部分==的关系 菱形连接整体，实线连接部分 组合关系 概念 组合关系是一种==强聚合==的关系，组合关系与聚合关系的区别在于：聚合关系中部分离开整体仍可存活，组合关系中部分离开整体没有意义，比如：人由身体、四肢等部分组成 ，它们的关系为组合关系。 表示方法 继承关系 ","date":"2023-10-31","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AF%84%E6%B5%8B%E5%B8%88%E4%B8%8B%E5%8D%88%E9%A2%98/:0:16","tags":null,"title":"软件评测师下午题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AF%84%E6%B5%8B%E5%B8%88%E4%B8%8B%E5%8D%88%E9%A2%98/"},{"categories":["软考"],"content":"多态机制下的测试 方法a重写，则方法a需要重新测试 方法b调用了重写的方法a，方法b也需要进行重新测试 ","date":"2023-10-31","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AF%84%E6%B5%8B%E5%B8%88%E4%B8%8B%E5%8D%88%E9%A2%98/:0:17","tags":null,"title":"软件评测师下午题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AF%84%E6%B5%8B%E5%B8%88%E4%B8%8B%E5%8D%88%E9%A2%98/"},{"categories":["软考"],"content":"测试序列和类的测试顺序 给出测试类EngineerWard()时的测试序列 Enginee()-setWorkTim()-calRewar()-getRewar() 注意本题时薪属于属性，不是方法/函数，后面getRewar()可以不写 给出类的测试顺序 Engineer-seniorEngineer-studentEngineer-system 从面向对象的特性，需要注意的问题 只需要在原有的测试分析和基础上增加对测试用例中输入数据的类型的考虑；先测试基类，然后再分别依据输入数据设计不同的测试用例。 要注意在测试System中statRewar()方法时涉及==基类==Engineer、==子类==studentEngineer、seniorEngineer中的calRewar()方法，即需要分别对各类的calRewar()方法设计测试用例进行测试。 ","date":"2023-10-31","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AF%84%E6%B5%8B%E5%B8%88%E4%B8%8B%E5%8D%88%E9%A2%98/:0:18","tags":null,"title":"软件评测师下午题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AF%84%E6%B5%8B%E5%B8%88%E4%B8%8B%E5%8D%88%E9%A2%98/"},{"categories":["java"],"content":"[toc] win10 添加JAVA_HOME环境变量 E:\\java\\jdk 添加CLASSPATH环境变量 %JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar Path添加两项 %JAVA_HOME%\\bin %JAVA_HOME%\\jre\\bin; %JAVA_HOME%\\bin %JAVA_HOME%\\jre\\bin; win11 添加JAVA_HOME环境变量 E:\\java\\jdk Path添加一项 %JAVA_HOME%\\bin 临时切换jdk版本 打开cmd 输出以下代码，并验证 set path=E:\\java\\jdk11\\bin;%path% java -version ","date":"2023-10-31","objectID":"/jdk/:0:0","tags":["jdk"],"title":"jdk","uri":"/jdk/"},{"categories":["博客"],"content":"[TOC] 美化 ","date":"2023-10-31","objectID":"/loveit/:0:0","tags":["loveit"],"title":"LoveIt","uri":"/loveit/"},{"categories":["博客"],"content":"添加运行时间 拷贝 \\themes\\LoveIt\\layouts\\partials\\footer.html 到 \\layouts\\partials\\footer.html， 在 \u003cdiv class=\"footer-container\"\u003e 的下方添加: \u003cdiv class=\"footer-line\"\u003e \u003cspan id=\"run-time\"\u003e\u003c/span\u003e \u003c/div\u003e 修改custom.js /* 站点运行时间 */ function runtime() { window.setTimeout(\"runtime()\", 1000); /* 请修改这里的起始时间 */ let startTime = new Date('04/24/2018 15:00:00'); let endTime = new Date(); let usedTime = endTime - startTime; let days = Math.floor(usedTime / (24 * 3600 * 1000)); let leavel = usedTime % (24 * 3600 * 1000); let hours = Math.floor(leavel / (3600 * 1000)); let leavel2 = leavel % (3600 * 1000); let minutes = Math.floor(leavel2 / (60 * 1000)); let leavel3 = leavel2 % (60 * 1000); let seconds = Math.floor(leavel3 / (1000)); let runbox = document.getElementById('run-time'); runbox.innerHTML = '本站已运行\u003ci class=\"far fa-clock fa-fw\"\u003e\u003c/i\u003e ' + ((days \u003c 10) ? '0' : '') + days + ' 天 ' + ((hours \u003c 10) ? '0' : '') + hours + ' 时 ' + ((minutes \u003c 10) ? '0' : '') + minutes + ' 分 ' + ((seconds \u003c 10) ? '0' : '') + seconds + ' 秒 '; } runtime(); ","date":"2023-10-31","objectID":"/loveit/:0:1","tags":["loveit"],"title":"LoveIt","uri":"/loveit/"},{"categories":["博客"],"content":"[TOC] hugo ","date":"2023-10-31","objectID":"/hugo/:0:0","tags":["hugo"],"title":"hugo","uri":"/hugo/"},{"categories":["博客"],"content":"安装 win+r输入：powershell，使用 scoop install hugo-extended hugo version //查看是否安装成功 进入自己的文件夹，创建自己的网站 hugo new site jaridli cd jaridli 初始化当前目录中的空 Git 存储库。 git init 安装LoveIt主题 下载压缩包 解压，名字为LoveIt，放在博客根目录的themes中 将exampleSite中的config.toml文件复制到博客根目录 启动服务，访问本地路径http://localhost:1313/ hugo server ","date":"2023-10-31","objectID":"/hugo/:0:1","tags":["hugo"],"title":"hugo","uri":"/hugo/"},{"categories":["博客"],"content":"文章测试 创建第一篇文章 创建md文件 hugo new posts/test.md Hugo 不会在您构建网站时发布草稿内容。即 --- title: \"My First Post\" date: 2022-11-20T09:03:20-08:00 draft: true //变为false即不使用草稿模式 --- 将draft变为false，再次启动 hugo server ","date":"2023-10-31","objectID":"/hugo/:0:2","tags":["hugo"],"title":"hugo","uri":"/hugo/"},{"categories":["博客"],"content":"部署在github git建立仓库 形式：账户名.github.io 如 zhtdbobo.github.io 静态网站 打开本地博客根目录 输入hugo命令 public文件夹中生成静态网站 将自己本地的文件夹推送到github 进入public文件夹 访问地址https://zhtdbobo.github.io ","date":"2023-10-31","objectID":"/hugo/:0:3","tags":["hugo"],"title":"hugo","uri":"/hugo/"},{"categories":["博客"],"content":"配置自定义域名 文章 ","date":"2023-10-31","objectID":"/hugo/:0:4","tags":["hugo"],"title":"hugo","uri":"/hugo/"},{"categories":["博客"],"content":"post头 分类 categories: [‘软考’] ","date":"2023-10-31","objectID":"/hugo/:0:5","tags":["hugo"],"title":"hugo","uri":"/hugo/"},{"categories":["linux"],"content":"文件重命名 ","date":"2023-10-30","objectID":"/shell/:0:0","tags":["shell"],"title":"shell","uri":"/shell/"},{"categories":["linux"],"content":"使用date cp：复制一个文件或文件夹 -r ：递归持续复制，用于目录的复制行为； -f ：为强制 (force) 的意思，若有重复或其它疑问时，不会询问使用者，而强制复制； old：是复制源的文件夹路径，因为我已经cd到该路径下了，所以不要前缀； copy_test/new_date ‘+%Y%m%d_%H.%M.%S’：是复制之后的文件夹路径，复制到copy_test文件夹下面的名为new_date ‘+%Y%m%d_%H.%M.%S’； cp -rf old copy_test/new_`date '+%Y%m%d_%H.%M.%S'` ","date":"2023-10-30","objectID":"/shell/:0:1","tags":["shell"],"title":"shell","uri":"/shell/"},{"categories":["python"],"content":"[TOC] conda安装 配置环境变量 E:\\Anaconda E:\\Anaconda\\Scripts E:\\Anaconda\\Library\\bin 可以在c盘的.condarc添加环境默认的安装路径，修改目标路径的访问权限为完全控制 envs_dirs: - E://Anaconda//envs #新的环境保存位置 conda换源 conda换源 在cmd中输入 conda config --set show_channel_urls yes 在C盘用户目录下会生成.condarc文件。 然后使用记事本打开，用下面的内容将其替换 show_channel_urls: true channels: - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/ - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/ - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/ - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/ - defaults 最后保存，然后在CMD中输入 conda clean -i 此时Anaconda已经换源成功！ 查看conda信息 conda info python换源 在CMD中输入 pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple conda常用命令 创建环境 新环境 conda create -n env-name python=version 从已有环境复制 conda create -n new_env_name --clone old_env_name 激活环境 conda activate env-name 并在新的环境中配置jupyter notebook activate env-name pip install ipykernel python -m ipykernel install --user --name env-name --display-name env-name conda删除一个环境 conda remove -n env-name --all jupyter删除kernel环境 jupyter kernelspec remove env-name 查看环境 conda env list 在已有的环境中更换python版本，如从3.7变为3.8 conda install python==3.8 添加conda右键菜单 在空白处添加，修改代码中的icon路径和bat文件路径 REG ADD HKCR\\Directory\\Background\\shell\\Conda\\ /ve /f /d \"Conda Prompt Here\" REG ADD HKCR\\Directory\\Background\\shell\\Conda\\ /v Icon /f /t REG_EXPAND_SZ /d C:\\miniconda3\\Menu\\Iconleak-Atrous-Console.ico REG ADD HKCR\\Directory\\Background\\shell\\Conda\\command /f /ve /t REG_EXPAND_SZ /d \"%windir%\\System32\\cmd.exe \"/K\" C:\\miniconda3\\Scripts\\activate.bat 在目录上添加，修改代码中的icon路径和bat文件路径 REG ADD HKCR\\Directory\\shell\\Conda\\ /ve /f /d \"Conda Prompt Here\" REG ADD HKCR\\Directory\\shell\\Conda\\ /v Icon /f /t REG_EXPAND_SZ /d C:\\miniconda3\\Menu\\Iconleak-Atrous-Console.ico REG ADD HKCR\\Directory\\shell\\Conda\\command /f /ve /t REG_EXPAND_SZ /d \"%windir%\\System32\\cmd.exe \"/K\" C:\\miniconda3\\Scripts\\activate.bat jupyter notebook 安装 pip install jupyter notebook 修改默认工作目录 生成配置文件 jupyter notebook --generate-config 搜索配置文件 C:\\Users\\JaridLi\\.jupyter\\jupyter_notebook_config.py 搜索notebook_dir关键词，修改值为自己的目录 c.NotebookApp.notebook_dir = 'E:\\Jupyter' 生成开始菜单 python .\\Lib\\_nsis.py mkmenus Q\u0026A pycharm终端无法激活conda环境 原因：pycharm 默认的终端是 Windows PowerShell 解决：新建一个cmd的终端 ","date":"2023-10-30","objectID":"/anaconda/:0:0","tags":["conda"],"title":"anaconda","uri":"/anaconda/"},{"categories":null,"content":" 影猫の仓库 555 777 ","date":"2023-10-28","objectID":"/amusements/video/:0:0","tags":null,"title":"Video","uri":"/amusements/video/"},{"categories":["工具"],"content":"[toc] 基本使用 ","date":"2023-10-28","objectID":"/git/:0:0","tags":["windows","git"],"title":"git","uri":"/git/"},{"categories":["工具"],"content":"创建本地的git用户信息 项目级别/仓库级别 git config user.name lyb_pro git config user.email jaridli_pro@163.com 操作系统用户级别 git config --global user.name lyb git config --global user.email jaridli@163.com ","date":"2023-10-28","objectID":"/git/:0:1","tags":["windows","git"],"title":"git","uri":"/git/"},{"categories":["工具"],"content":"生成ssh密钥配置到git 判断本机是否存在ssh密钥 cd ~/.ssh ls 如果没有 id_rsa.pub 或 id_dsa.pub 文件，生成密钥 ssh-keygen -t rsa -C \"your_email@example.com\" 复制.pub中的内容到github的ssh，在本地git bash进行测试 ssh -T -p 443 git@github.com ","date":"2023-10-28","objectID":"/git/:0:2","tags":["windows","git"],"title":"git","uri":"/git/"},{"categories":["工具"],"content":"本地仓库状态 添加到暂存区 git add . 提交分支 git commit -m \"提交信息\" ","date":"2023-10-28","objectID":"/git/:0:3","tags":["windows","git"],"title":"git","uri":"/git/"},{"categories":["工具"],"content":"分支 创建分支 git branch 分支名 切换分支 git checkout 分支名 创建并切换分支 git checkout -b 分支名 ","date":"2023-10-28","objectID":"/git/:0:4","tags":["windows","git"],"title":"git","uri":"/git/"},{"categories":["工具"],"content":"推送 连接远程仓库 添加远程别名 git remote add 别名 远程地址 删除远程别名 git remote remove 别名 查看remote信息 git remote -v 推送到远程仓库 带分支名，会在远程==自动创建一个同名的分支== git push 别名 分支名 本地有，远程没有，推送的同时在远程创建 git push 别名 本地存在的分支名:即将创建的远程分支名 不带分支名，先通过upstream和远程分支建立关联，再推送 git push --set-upstream 别名 远程分支名 git push 强制推送 git push -f origin master 远程仓库添加多个url同时push，pull 找到.git下面的config文件 添加url Q\u0026A ","date":"2023-10-28","objectID":"/git/:0:5","tags":["windows","git"],"title":"git","uri":"/git/"},{"categories":["工具"],"content":"Connection refused ssh: connect to host github.com Port : 22 Connection refused 添加配置文件，并编辑 vim config 添加如下内容 Host github.com User 820096913@qq.com Hostname ssh.github.com PreferredAuthentications publickey IdentityFile ~/.ssh/id_rsa Port 443 ","date":"2023-10-28","objectID":"/git/:0:6","tags":["windows","git"],"title":"git","uri":"/git/"},{"categories":["部署"],"content":"[toc] 安装 官网 下载 上传到服务器并解压，移动到 /usr/local 目录下 tar -zxvf mongodb-linux-x86_64-rhel70-5.0.9.tgz mv mongodb-linux-x86_64-rhel70-5.0.9 mongodb mv mongodb-linux-x86_64-rhel70-5.0.9 /usr/local/mongodb 进入 mongodb 目录，并创建文件夹 data，在 data 文件夹下再创建 db 文件夹（用于存放数据库数据）和 log文件夹（存放 mongo 日志）。然后为其设置可读写权限。 cd /usr/local/mongodb/ mkdir data data/db data/log chmod 666 data/db data/log/ 在 mongodb 目录下新建配置文件 mongodb.conf，默认端口27017 vim mongodb.conf # 数据库数据存放目录 dbpath=/usr/local/mongodb/data/db # 日志文件存放目录 logpath=/usr/local/mongodb/data/log/mongodb.log # 日志追加方式 logappend=true # 端口 port=27017 # 是否认证 auth=true # 以守护进程方式在后台运行 fork=true # 远程连接要指定ip，否则无法连接；0.0.0.0代表不限制ip访问 bind_ip=0.0.0.0 配置环境变量 vim /etc/profile 末尾加入如下内容： export MONGODB_HOME=/usr/local/mongodb export PATH=$PATH:$MONGODB_HOME/bin 重启系统配置 source /etc/profile 开机自启动 vim /lib/systemd/system/mongodb.service 命令新建开机启动配置文件 输入以下内容： [Unit] Description=mongodb After=network.target remote-fs.target nss-lookup.target [Service] Type=forking ExecStart=/usr/local/mongodb/bin/mongod -f /usr/local/mongodb/mongodb.conf ExecReload=/bin/kill -s HUP $MAINPID ExecStop=/usr/local/mongodb/bin/mongod -f /usr/local/mongodb/mongodb.conf --shutdown PrivateTmp=true [Install] WantedBy=multi-user.target 然后依次执行以下4个命令，使之生效。 systemctl start mongodb.service systemctl status mongodb.service systemctl enable mongodb.service systemctl daemon-reload 输入mongo进入数据库 创建管理员帐号 use admin db.createUser({user:\"管理员\",pwd:\"密码\",roles:[{role:\"userAdminAnyDatabase\",db:\"admin\"}]}) 认证：如果不进行 db.auth(“用户名”,“密码”) 进行用户验证的话，是执行不了任务命令的，只有通过认证才可以。注意，每一个用户都需要在创建这个用户的认证库下进行认证。 db.auth(\"管理员\",\"密码\") 创建具体数据库的用户，赋予readWrite权限和dbAdmin权限 use test db.createUser({user:'用户名',pwd:'密码',roles:[{role:'readWrite',db:'数据库名'},{role:'dbAdmin',db:'数据库名'}]}) 退出当前用户，使用新用户登录 exit db.auth(\"用户名\",\"密码\") use 数据库名 创建集合 db.createCollection(\"集合名\") 使用navicat连接远程mongodb，默认端口27017，输入验证的数据库、用户名、密码 ) docker安装mongodb 拉取mongodb镜像，并查看 docker pull mongo:latest docker images 不带验证，启动mongodb容器,参数如下: -p 端口映射（本机端口：容器端口） -v 数据卷映射 –name 命名 -d 后台运行 docker run -p 27018:27017 -v /data/mongo:/data/db --name mongodb -d mongo 进入容器，进入mongodb控制台，最后创建各种用户，可以使用上面的步骤。 docker exec -it mongodb /bin/bash 输入mongo进入 删除原有容器，用验证方式启动mongodb容器 docker rm -f mongodb docker run -p 27018:27017 -v /data/mongo:/data/db --name mongodb -d mongo --auth ","date":"2023-10-23","objectID":"/mongodb/:0:0","tags":["linux","mongodb"],"title":"mongodb","uri":"/mongodb/"},{"categories":["部署"],"content":"[toc] jdk安装 下载jdk传到服务器并解压 mkdir /usr/local/java tar -zxvf jdk-8-linux-x64.tar.gz -C /usr/local/java 修改配置文件 vim /etc/profile 添加如下： 方案一 JAVA_HOME=/usr/local/java/jdk1.8.0_301 CLASSPATH=$JAVA_HOME/jre/lib/ext:$JAVA_HOME/lib/tools.jar PATH=$JAVA_HOME/bin:$PATH export PATH JAVA_HOME CLASSPATHTH 方案二 export JAVA_HOME=/usr/local/java/jdk8 export JRE_HOME=/usr/local/java/jdk8/jre export CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib:$CLASS_PATH export PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin:$JAVA_HOME 加载配置文件 source /etc/profile 验证并看看自己的配置是否都正确 java -version javac echo $JAVA_HOME echo $CLASSPATH echo $PATH 使springboot项目支持https安全协议 在yml文件中配置https的端口以及jks证书(.jks文件)以及密码 server: port: 8082 ssl: # ssl相关配置 enabled: true key-store: classpath:文件名 key-store-password: 密码 key-store-type: JKS 若要配置http自动跳转https，添加HttpConfig配置类如下，并在yml文件中添加http的端口 http-port: 80 # http重定向https配置 修改配置类 package com.lyb.travel.config; import org.apache.catalina.Context; import org.apache.catalina.connector.Connector; import org.apache.tomcat.util.descriptor.web.SecurityCollection; import org.apache.tomcat.util.descriptor.web.SecurityConstraint; import org.springframework.beans.factory.annotation.Value; import org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; /** * @author lyb * @create 2022/4/10-18:18 * @method */ @Configuration public class HttpsConfiguration { @Value(\"${http-port}\") private int port; @Value(\"${server.port}\") private int sslPort; @Bean public TomcatServletWebServerFactory tomcatServletWebServerFactory() { TomcatServletWebServerFactory factory = new TomcatServletWebServerFactory() { @Override protected void postProcessContext(Context context) { SecurityConstraint securityConstraint = new SecurityConstraint(); securityConstraint.setUserConstraint(\"CONFIDENTIAL\"); SecurityCollection securityCollection = new SecurityCollection(); securityCollection.addPattern(\"/*\"); securityConstraint.addCollection(securityCollection); context.addConstraint(securityConstraint); } }; factory.addAdditionalTomcatConnectors(redirectConnector()); return factory; } private Connector redirectConnector() { Connector connector = new Connector(TomcatServletWebServerFactory.DEFAULT_PROTOCOL); connector.setScheme(\"http\"); connector.setPort(port); connector.setSecure(false); connector.setRedirectPort(sslPort); return connector; } } springboot部署 在pom文件中引入打包插件，并且在插件中添加repackage功能（点击package之后打包成的jar之 后再将这个jar重新打包成可运行的jar，将原先的jar包改成.original为后缀的文件） \u003cbuild\u003e \u003cfinalName\u003e${project.name}\u003c/finalName\u003e \u003cplugins\u003e \u003cplugin\u003e \u003cgroupId\u003eorg.springframework.boot\u003c/groupId\u003e \u003cartifactId\u003espring-boot-maven-plugin\u003c/artifactId\u003e \u003cversion\u003e2.6.4\u003c/version\u003e \u003cexecutions\u003e \u003cexecution\u003e \u003cgoals\u003e \u003cgoal\u003erepackage\u003c/goal\u003e \u003c/goals\u003e \u003c/execution\u003e \u003c/executions\u003e \u003c/plugin\u003e \u003c/plugins\u003e \u003c/build\u003e 在maven中进行clean，package打包成jar包 传输到linux服务器 将项目启动并在后台运行 nohup java -jar ai.jar \u0026 ","date":"2023-10-22","objectID":"/java/:0:0","tags":["java","jdk","springboot"],"title":"java","uri":"/java/"},{"categories":["部署"],"content":"[toc] 安装 上传文件到/home/software 解压 tar -zxvf redis-6.2.1.tar.gz 检查gcc版本 gcc –version 进入目录 cd redis-6.2.1 执行 make 跳过 make test 执行 make install 安装成功在 /usr/local/bin 配置 备份配置文件 mkdir /myredis cp /home/software/redis-6.2.1/redis.conf /myredis 修改配置文件redis.conf 设置后台启动 daemonize no 改成 yes 修改默认端口 port 6379改为6380 允许其他主机访问 找到 bind 127.0.0.1 -::1 加 # 注释， protected-mode no 改成 yes 指定端口访问 启动redis服务 redis-server /myredis/redis.conf 进入实例 redis-cli -p 6380 测试 ping 返回pong代表成功 其他 exit 退出命令行 shutdown 关闭实例 或者在命令行外使用redis-cli -p 6380 shutdown 密码访问 设置密码 requirepass 登录时使用auth进行验证 ","date":"2023-10-19","objectID":"/redis/:0:0","tags":["linux","redis"],"title":"redis","uri":"/redis/"},{"categories":["部署"],"content":"[toc] 基础安装 下载tomcat。官网 检查linux是否安装tomcat rpm -qa | grep tomcat 将下载好的tomcat上传到服务器，解压缩并移动 tar -zxvf apache-tomcat-9.0.62.tar.gz mv apache-tomcat-9.0.62 tomcat9 mv tomcat9/ /usr/local/ 启动/关闭tomcat，在bin目录下执行 cd bin ./startup.sh ./shutdown.sh 扩展配置 ","date":"2023-10-19","objectID":"/tomcat/:0:0","tags":["linux","tomcat"],"title":"tomcat","uri":"/tomcat/"},{"categories":["部署"],"content":"同时运行多个tomcat 修改端口号不一样即可（shutdown， http ，https） shutdown:8005 http:8080 https:8443 ","date":"2023-10-19","objectID":"/tomcat/:1:0","tags":["linux","tomcat"],"title":"tomcat","uri":"/tomcat/"},{"categories":["部署"],"content":"设置开机自启 切换目录 cd /etc/init.d vim tomcat9 复制以下代码：保存退出 # description: Tomcat Start Stop Restart # processname: tomcat # chkconfig: 2345 20 80 #idea - tomcat config start #!/bin/bash # description: Tomcat Start Stop Restart # processname: tomcat # chkconfig: 2345 20 80 JAVA_HOME=/usr/local/java/jdk export JAVA_HOME PATH=$JAVA_HOME/bin:$PATH export PATH CATALINA_HOME=/usr/local/tomcat9 case $1 in start) sh $CATALINA_HOME/bin/startup.sh ;; stop) sh $CATALINA_HOME/bin/shutdown.sh ;; restart) sh $CATALINA_HOME/bin/shutdown.sh sh $CATALINA_HOME/bin/startup.sh ;; esac exit 0 为 tomcat 分配可执行权限：chmod +x tomcat9 添加 tomcat 为系统服务：chkconfig –add tomcat9 输入命令查看是否添加成功： chkconfig –list 启动 tomcat命令：service tomcat9 start 使用浏览器访问服务器的8080端口是否有tomcat主页出现 ","date":"2023-10-19","objectID":"/tomcat/:2:0","tags":["linux","tomcat"],"title":"tomcat","uri":"/tomcat/"},{"categories":["部署"],"content":"配置支持https 上传ssl的ks证书到服务器，如jaridli.top.jks 修改conf/server.xml，配置http连接和https连接 redirectPort是让一个端口直接重定向到另外一个 修改conf/web.xml，使HTTP 自动跳转 HTTPS，在结束标签 后面换行，并添加以下内容，重启tomcat CLIENT-CERT Client Cert Users-only Area SSL /* CONFIDENTIAL ","date":"2023-10-19","objectID":"/tomcat/:3:0","tags":["linux","tomcat"],"title":"tomcat","uri":"/tomcat/"},{"categories":["部署"],"content":"使用tomcat作为上传文件服务器 tomcat服务器默认是不可写操作，只允许读，所以在conf/web.xml文件中的servlet标签内加入readonly：false,重启tomcat readonly false 创建自己需要上传到的目的文件夹，并上传一张图片用于测试 修改conf/server.xml，配置目的文件夹和外网访问路径的映射，在末尾host标签内添加如下配置，并重启服务器 参数说明： docBase =“图片的真实放置的路径文件夹” path=“外网访问的路径” 在浏览器访问服务器ip:8080/外网访问路径/文件名称 ","date":"2023-10-19","objectID":"/tomcat/:4:0","tags":["linux","tomcat"],"title":"tomcat","uri":"/tomcat/"},{"categories":["软考"],"content":"[TOC] 数据流图DFD ","date":"2023-10-19","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E5%A4%A7%E9%A2%98/:0:0","tags":null,"title":"软件设计师-大题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E5%A4%A7%E9%A2%98/"},{"categories":["软考"],"content":"基本图形 图形含义 数据流、加工、数据存储（文件）、外部实体 案例 分层 结构化、自定向下 ","date":"2023-10-19","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E5%A4%A7%E9%A2%98/:0:1","tags":null,"title":"软件设计师-大题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E5%A4%A7%E9%A2%98/"},{"categories":["软考"],"content":"数据字典 符号含义 ","date":"2023-10-19","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E5%A4%A7%E9%A2%98/:0:2","tags":null,"title":"软件设计师-大题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E5%A4%A7%E9%A2%98/"},{"categories":["软考"],"content":"数据平衡原则 父图和子图（如顶层、0层、1层之间的关系） 进行对比，看哪一部分缺失 子图内平衡（一个加工需要输入和输出） 黑洞：只有输入 奇迹：只有输出 数据库 ","date":"2023-10-19","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E5%A4%A7%E9%A2%98/:0:3","tags":null,"title":"软件设计师-大题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E5%A4%A7%E9%A2%98/"},{"categories":["软考"],"content":"设计过程 概念结构设计的产物：ER模型 逻辑结构设计的产物：关系模式（由ER图得到） 如学生（学号，姓名） ","date":"2023-10-19","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E5%A4%A7%E9%A2%98/:0:4","tags":null,"title":"软件设计师-大题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E5%A4%A7%E9%A2%98/"},{"categories":["软考"],"content":"ER图 联系类型 例图 员工和经理是包含关系（使用一条线加一个圆圈） 合并时可以将一的一端合并到多的一端作为外键 UML ","date":"2023-10-19","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E5%A4%A7%E9%A2%98/:0:5","tags":null,"title":"软件设计师-大题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E5%A4%A7%E9%A2%98/"},{"categories":["软考"],"content":"用例图 包含关系include ==必须==使用到包含的用例 扩展关系 ==可能不==使用到包含的用例 泛化关系extend ","date":"2023-10-19","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E5%A4%A7%E9%A2%98/:0:6","tags":null,"title":"软件设计师-大题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E5%A4%A7%E9%A2%98/"},{"categories":["软考"],"content":"类图与对象图 多重度 关系 ","date":"2023-10-19","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E5%A4%A7%E9%A2%98/:0:7","tags":null,"title":"软件设计师-大题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E5%A4%A7%E9%A2%98/"},{"categories":["软考"],"content":"顺序图 强调时间顺序 ","date":"2023-10-19","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E5%A4%A7%E9%A2%98/:0:8","tags":null,"title":"软件设计师-大题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E5%A4%A7%E9%A2%98/"},{"categories":["软考"],"content":"活动图 粗横线代表有并行的线程 带泳道（活动按照归属对象进行划分） ","date":"2023-10-19","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E5%A4%A7%E9%A2%98/:0:9","tags":null,"title":"软件设计师-大题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E5%A4%A7%E9%A2%98/"},{"categories":["软考"],"content":"状态图 箭线表示事件 节点一般为状态，确定由哪几种状态 ","date":"2023-10-19","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E5%A4%A7%E9%A2%98/:0:10","tags":null,"title":"软件设计师-大题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E5%A4%A7%E9%A2%98/"},{"categories":["软考"],"content":"通信图（协作图） 类似顺序图，但是不是很强调时间顺序 节点为对象 ","date":"2023-10-19","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E5%A4%A7%E9%A2%98/:0:11","tags":null,"title":"软件设计师-大题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E5%A4%A7%E9%A2%98/"},{"categories":["软考"],"content":"构件图 c语言算法 ","date":"2023-10-19","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E5%A4%A7%E9%A2%98/:0:12","tags":null,"title":"软件设计师-大题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E5%A4%A7%E9%A2%98/"},{"categories":["软考"],"content":"分治 思想 大问题拆分为小问题（相互独立） 解决小问题比较容易 小问题进行合并为原来的大问题 递归 ","date":"2023-10-19","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E5%A4%A7%E9%A2%98/:0:13","tags":null,"title":"软件设计师-大题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E5%A4%A7%E9%A2%98/"},{"categories":["软考"],"content":"回朔 深度优先搜索，走不通就退回 ","date":"2023-10-19","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E5%A4%A7%E9%A2%98/:0:14","tags":null,"title":"软件设计师-大题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E5%A4%A7%E9%A2%98/"},{"categories":["软考"],"content":"贪心 每次都选择当前最优的 不一定是全局最优的 ","date":"2023-10-19","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E5%A4%A7%E9%A2%98/:0:15","tags":null,"title":"软件设计师-大题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E5%A4%A7%E9%A2%98/"},{"categories":["软考"],"content":"动态规划 大问题拆分为小问题 不一定独立，因此会构造出一个表进行查找 面向对象程序设计 ","date":"2023-10-19","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E5%A4%A7%E9%A2%98/:0:16","tags":null,"title":"软件设计师-大题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E5%A4%A7%E9%A2%98/"},{"categories":["软考"],"content":"C++ 类与派生类 类外定义函数体 构造函数 析构函数 对象指针与对象引用 对象指针：类名 *对象指针名 对象引用：类名 \u0026对象引用名 = 被引用对象 通过对象名和对象引用访问对象的成员，使用的运算符是 . 使用对象指针访问对象的成员，使用的运算符是 -\u003e 对象指针名 -\u003e 数据成员名 对象指针名 -\u003e 成员函数名（参数表） 虚函数 virtual 实现运行时多态 ","date":"2023-10-19","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E5%A4%A7%E9%A2%98/:0:17","tags":null,"title":"软件设计师-大题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E5%A4%A7%E9%A2%98/"},{"categories":["软考"],"content":"Java ","date":"2023-10-19","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E5%A4%A7%E9%A2%98/:0:18","tags":null,"title":"软件设计师-大题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E5%A4%A7%E9%A2%98/"},{"categories":["软考"],"content":"[toc] 题目分布 上午场：75题（75分），45分及格 下午场：数据流图、数据库、UML、c语言算法、c++/java面向对象编程+设计模式 计算机组成原理 数据的表示 二进制、七进制、八进制、十进制、十六进制 原码 正数：最高位为0 负数：最高位为1 正0和负0表示结果不同，因此表示范围-127~127 反码 正数：和原码一样 负数：原码的符号位取反，其余不变Z 正0和负0表示结果不同，因此表示范围-127~127 补码 正数：和原码一样 负数：反码+1 加减操作的表示结果正确 0只有一种表示，因此表示范围-128~127 移码 补码的首位取反 加减操作的表示结果正确 浮点数运算 对阶 尾数计算 结果格式化 计算机结构 运算器：只进行计算 控制器：操作控制 存储器 Flynn分类 SISD单指令流单数据流 SIMD单指令流多数据流 MISD多指令流单数据流 MIMD多指令流多数据流 指令集 指令系统类型| ��令| ��址方式| ��现方式| ��他| CISC（复杂）| ��量多，频率差别大 可变长度| ��种| ��程序控制技术| ��制周期长| RISC（精简）| ��量少，频率接近 定长 大部分是单周期指令| ��| ��用寄存器多 硬布线逻辑控制 流水线| ��化编译，更加有效支持高级语言| 流水线 取指、分析、执行 周期计算 $\\Delta t$ : 一个流水线周期 k : 一个流水线有k个步骤，如下图分位3步（取指，分析，执行） 吞吐率TP $TP= \\frac{指令条数}{流水线执行时间}$ $TP_{max}= \\frac{1}{\\Delta t}$ 加速比S $S= \\frac{不使用流水线执行时间}{使用流水线执行时间}$ 效率E 存储系统 cpu：速度最快，有寄存器 Cache ==按内容存取==，不是必须的 局部性原理 时间局部性：刚刚访问完的指令之后频繁访问，如for循环 空间局部性：刚刚访问完的空间之后频繁访问，如数组 工作集理论：被频繁访问的页面集合 ”Cache+主存“的平均周期计算 $t_1$：Cache的周期时间 $t_2$：主存储器的周期时间 h：Cache命中率 ==$t_3 = h * t_1 + (1-h) * t_2$== 主存 RAM：DRAM、SDRAM ROM：MROM、PROM、EPROM、falsh memory ==答案：112、4== 外存：速度最慢，有硬盘、光盘、U盘等 磁盘 存取时间：寻道时间（平均定位时间）+等待时间（转动延迟）+读写时间 ==答案：366ms、66ms== 总线系统 内部总线：内部芯片与cpu的接口 系统总线：插件和微机的接口，如PCI、VGA 数据总线 地址总线 控制总线 外部总线：微机和外部设备的接口 可靠性 R：可靠度 $\\lambda$：出错率 串联系统 并联系统 n模冗余系统 混合系统 校验码 差错控制 码距：整个编码系统中任意两个码字的最小距离（即需要改变多少位能从一个码字变为另一个码字） CRC（循环校验码）：在尾部加上校验信息 编码 长度为生成多项式的长度-1，如$x^4+x^3+x+1$的生成多项式为11011 若原始报文为11001010101，则在末尾补5-1=4个0，为11001010101==0000== 用11001010101==0000==对生成多项式进行模2除法 得到的余数替换掉原始的4个0，最终CRC编码为11001010101==0011== 解码 用CRC编码对生成多项式进行模2除法 余数为0，表示没有差错 余数为1，表示出现差错 ==可以检错、不能纠错== 模2除法和普通除法的区别 海明校验码 利用奇偶性进行检错和纠错 码距为3，检错2位，纠错1位 校验 确定校验位的长度r（n为信息位数）： $$2^r - 1 \\geq n + r$$ 确定校验码的位置和信息位的位置，进行填表 利用计算公式得到校验位的值 纠错 将接受到的数据按照校验的公式进行计算并且和对应的校验位进行异或运算 得到的二进制编码转为十进制就是错误的位数，将这一位取反即可得到正确结果 操作系统 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:0","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"进程管理 进程状态转换 前趋图：活动的依赖关系 进程的同步与互斥 生产者与消费者 单缓冲区 多缓冲区 PV操作 临界资源：共享资源 临界区：一个访问临界资源的代码块 信号量：一个变量 P操作 V操作 前趋图和PV操作的结合 死锁问题 最少有多少个资源不会产生死锁 如图，$3 * （5 - 1） + 1 = 13$ 条件 互斥 保持和等待 不剥夺 环路等待 死锁预防 打破四大条件 死锁避免 有序资源分配 银行家算法 根据最大需求量、已分配资源、总资源列出剩余资源 将剩余资源按照选项进行一个一个匹配 每次匹配完毕剩余资源数会变多，因为要加上已经执行过的进程消耗的资源数 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:1","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"存储管理 分区存储组织 首次适应 第一次遇到能装载下的就使用 最佳适应 按内存从小到大进行排序 会产生很多无法使用的小内存块 最差适应 按内存从大到小进行排序 循环首次适应 将首次适应算法的内存块连成一个环装，循环使用 页式存储 逻辑地址和物理地址的转换 逻辑地址中找到页号 查找页表，得到物理地址的块号 加上页内地址就得到了物理地址 优点： 利用率高 碎片小：==只有最后一页可能不占满==，前面的页都会占满 分配管理简单 缺点： 增加系统开销：需要进行查页表 抖动现象 淘汰页面 优先淘汰访问位为0的页面 优先淘汰修改位为0的页面 段式存储 优点： 多道程序共享内存 各程序修改互不影响 缺点： 内存碎片多，浪费大 内存利用率低 段页式存储 优点： 空间浪费小 存储共享、存储保护容易 动态连接 缺点： 复杂性和开销多 占用内容增加 执行速度下降 快表 相联存储器 高速缓存器 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:2","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"文件系统 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:3","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"作业管理 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:4","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"设备管理 中断系统 中断：CPU在正常执行程序的过程中，由于内部/外部事件的触发或由程序的预先安排，引起CPU暂时中断当前正在运行的程序，而转去执行为内部/外部事件或程序预先安排的事件的服务子程序，待中断服务子程序执行完毕后，CPU再返回到被暂时中断的程序处（断点）继续执行原来的程序，这一过程成为中断 中断向量：中断服务程序的入口地址 中断向量表：存放系统中所有的中断类型码及其对应的中断向量的存储区域 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:5","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"微内核的操作系统 数据库 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:6","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"数据库模式 三级模式 外模式：视图 模式：数据库的基本表 内模式：物理上的存储文件 两级映射 外模式-模式映射 模式-内模式映射 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:7","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"ER模型 集成方法 多个局部ER图一次集成 逐步集成，累加的方式一次集成两个局部ER图 集成产生的冲突 ER图转换关系模式 一个实体转换为一个关系模式 1:1联系，可以把联系放在两边中的任意一边，即最少需要2个关系模式 1:n联系，可以把联系放在n的一边，即最少需要2个关系模式 m:n联系，可以把联系作为一个单独的关系模式，即最少需要3个关系模式 三个以上实体间的一个多元联系，也把联系作为一个单独的关系模式，如下至少需要4个关系模式 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:8","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"关系代数和元组演算 并、交、差 笛卡尔积、投影（列、字段）、选择（行、记录） 联接（相同的字段只保留一个） 自然连接：不用写出来哪一列等于哪一列，默认是所有的相同的列 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:9","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"规范化理论 非规范化的问题 数据冗余、更新异常、插入异常、删除异常 BC范式不存在这些问题 键 分类 �名|� �明| �键|� �一标识元组| �选键|� �一标识元组的基础上==消除多余属性==| �键|� �选键中任选一个| �键|� �他关系的主键，用于关联查询| 求候选键 画出有向图 找入度为0的节点，尝试遍历这个有向图，如果能够遍历整个图，则为候选键 入度为0的节点无法遍历整个图，需要尝试一下中间节点（既有入度，又有出度），并入入度为0的节点中，直到可以遍历整个图 范式 主属性：出现在候选键中的属性 非主属性： ��式名称| ��明| ��注| NF| ��性值都是不可分的原子值| NF| ��除非主属性对候选键的部分依赖| ��分依赖：属性只依赖候选键的一部分 候选键位单属性时不存在部分依赖| NF| ��除非主属性对候选键的传递依赖| ��递依赖：非主属性A依赖一个非主属性B，而非主属性B又依赖于候选键| CNF| ��除主属性对候选键的传递依赖| ��数依赖的左边是候选键| 模式分解 保持函数依赖分解 无损分解：可以还原 无损联接分解：将一个关系模式分解为若干个关系模式，通过自然联接和投影等运算仍能还原到原来的关系模式 有损分解：无法还原 例题 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:10","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"并发控制 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:11","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"数据库完整性约束 实体完整性约束：主键 参照完整性约束：外键 用户自定义完整性约束： 触发器：适用于更复杂的需求 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:12","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"数据库安全 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:13","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"数据备份 完全备份：备份所有数据 差量备份：仅备份上次完全备份之后变化的数据 增量备份：备份上一次备份之后变化的数据 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:14","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"数据仓库与数据挖掘 数据仓库 面向主题 集成的 相对稳定的 反映历史变化 数据挖掘 决策树 神经网络 遗传算法 关联规则挖掘算法 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:15","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"反规范化技术 出现原因 由于规范化会使表不断的拆分，从而导致数据表过多。这样虽然减少了数据冗余，提高了增、删、改的速度，但会增加查询的工作量。系统需要进行多次连接，才能进行查询操作，使得系统效率大大下降 技术手段 增加派生性冗余列 增加冗余列 重新组表 分割表 目的 ==提高查询效率== 大数据 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:16","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"特征 高度可扩展性、高性能、高度容错、支持异构环境、较短的分析延迟 、易用且开放的接口、较低成本、向下兼容性 网络 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:17","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"七层模型 层次 名称 主要功能 主要设备及协议 7 应用层 实现具体的功能 POP3、FTP、HTTP、Telnet、SMTP、DHCP、TFTP、SNMP、DNS 6 表示层 数据的格式与表达、加密、压缩 5 会话层 建立、管理和终止会话 4 传输层 端到端的连接 TCP、UDP 3 网络层 分组传输和路由选择 三层交换机、路由器、ARP、RARP、IP、ICMP、IGMP 2 数据链路层 建立、管理和终止会话 网桥、交换机、网卡、PPTP、P2TP、SLIP、PPP\r1 物理层 二进制传输 中继器、集线器 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:18","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"网络技术标准与协议 TCP/IP协议：Internet，可扩展，可靠，应用最广，牺牲速度和效率 IPX/SPX协议：NOVELL，路由，大型企业网 NETBEUI协议：IBM，非路由，快速 传输层协议 应用层协议 端口说明 TCP POP3 110 FTP 控制信息：21 传输信息：20 HTTP 80 Telnet 23 SMTP 25 UDP DHCP 67 TFTP 69 SNMP 161 DNS 53 TCP协议 DHCP协议 DNS协议 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:19","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"计算机网络分类 按分布范围 局域网LAN 城域网MAN 广域网WAN 因特网 按拓扑结构 总线型 星型 环型 数据结构 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:20","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"树 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:21","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"图 分类 无向图 有向图 存储 邻接矩阵 无向图是对称的，可以只存储上三角或者下三角的元素 邻接表 遍历 深度优先 广度优先 拓扑排序 最小生成树 普利姆算法 克鲁斯卡尔算法 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:22","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"排序 插入类排序 直接插入排序 希尔排序 交换类排序 冒泡排序 快速排序 选择类排序 简单选择排序 堆排序 归并排序 基数排序 编译原理 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:23","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"编译过程 词法分析：非法字符、单词拼写错误 语法分析：标点符号、括号不匹配、缺少操作数 语义分析：死循环、对象类型不合法、零除数 中间代码生成 代码优化 目标代码生成 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:24","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"文法 定义 分类 语法推导树 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:25","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"有限自动机 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:26","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"正规式 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:27","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"表达式 前缀表达式 中缀表达式 后缀表达式 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:28","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"程序语言特点 法律法规 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:29","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"计算机软件著作权法律文件 《中华人民共和国著作权法》 《计算机软件保护条例》 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:30","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"保护期限 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:31","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"知识产权人确定 职务作品 委托创作和合作开发 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:32","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"侵权判断 中国公民、法人或者其他组织的作品，不论是否发表，都享有著作权。 开发软件所用的思想、处理过程、操作方法或者数学概念不收保护 著作权法不适用于以下情形： 法律法规的文件及译文 时事新闻 历法、通用数表、通用表格和公式 侵权和不侵权 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:33","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"标准分类 多媒体 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:34","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"音频 1.声音范围 - 人耳：20Hz~20kHz - 说话：300~3400Hz - 乐器：20Hz~20kHz 2. 采样 - 采样频率：应为声音最高频率的2倍 - 采样精度 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:35","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"图像 亮度 色调：红、绿、蓝 饱和度：鲜艳 彩色空间 RGB（光的三原色，相加的原理） YUV（电视，兼容方言）、YIQ、YCBCR CMY（CMYK，印刷三原色，相减的原理） HSV（HSB） ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:36","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"多媒体技术 种类 容量计算 图像 音频 $$容量 = 采样频率（Hz）\\times 量化/采样位数（位）\\times 声道数 \\div 8$$ 视频 $$容量 = 每帧图像容量（Byte）\\times 每秒帧数 \\times 时间 + 音频容量\\times 时间$$ 多媒体标准 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:37","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"数据压缩 冗余 空间冗余：大面积相同的颜色，记录颜色和空间坐标对应信息 时间冗余：一帧和下一帧相同 视觉冗余：如jpg 信息熵冗余 结构冗余 知识冗余：可以通过知识分析得到信息 有损压缩（熵压缩法）和无损压缩（熵编码法） 开发模型 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:38","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"瀑布模型 适用于需求明确、二次开发的项目 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:39","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"其他模型 原型模型 一个简易系统可以包含界面，按钮等 增量模型 一块一块的做出来 核心模块先做 螺旋模型 多个模型的组合 引入了风险分析 演化模型 由原型模型多次演化而来 v模型 左边分析和右边的测试计划进行匹配 及早的进行测试，发现问题 喷泉模型 面向对象 RAD模型（快速开发模型） 瀑布模型和构件组装模型的结合 构件组装模型（CBSD） 节省时间 可以复用构件 可靠性 敏捷开发方法 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:40","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"信息系统开发方法 信息系统安全 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:41","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"安全属性 属性 常见方法（原则） 保密性 最小授权原则，防暴露、信息加密、物理保密 完整性 安全协议、校验码、密码校验、数字签名、公证 可用性 ip过滤、业务流控制、路由选择控制、审计跟踪 不可抵赖性 数字签名 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:42","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"加密技术 对称加密（公享密钥加密） 加密和解密一样 秘钥分发困难 加密强度不高 非对称加密（公开密钥加密） 加密和解密用的秘钥不一样，但是需要配对 A的公钥加密，A的私钥解密 A的私钥加密，A的公钥解密 加密速度慢，不适宜加密大数据量的数据 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:43","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"信息摘要 单向散列函数（单向Hash函数） 不能还原 固定长度 常用的算法 ��法| ��数| ��性| D5| 28| HA| 60| ��全性更高| ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:44","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"数字签名 使用私钥进行加密，即数字签名 使用公钥进行解密，即数字签名的验证过程 常见方法 对正文产生摘要（MD5） 对摘要进行签名（非对称加密） 发送传输 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:45","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"数字证书与PGP 数字信封 发送方将正文进行对称加密传输，将对称密钥用接收方的公钥进行非对称加密传输 接收方收到，使用自己的私钥解密得到对称密钥，在进行对称加密得到正文 数字证书 公钥和主体进行绑定 PGP证书和X.509证书 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:46","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"邮件加密系统 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:47","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"网络层次的安全保障 层次 技术 应用层 PGP Https SSL 表示层 SSL 会话层 SSL 传输层 TLDS SET SSL 网络层 防火墙 IPSec 数据链路层 链路解密 PPTP L2TP 物理层 屏蔽 隔离 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:48","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"网络威胁与攻击 威胁名称 描述 重放攻击（ARP） 合法的数据出于非法目的进行重新发送 拒绝服务（DOS） 信息的合法访问被无条件阻止 窃听 可能的==合法手段==窃取信息资源和敏感信息，如搭线监听 业务流分析 ==长期==窃听，进行分析 信息泄露 泄漏、透漏给非授权实体 破坏信息完整性 增删修改信息 非授权访问 信息被非授权的人使用，或者以非授权的方式使用 假冒 冒充为合法用户，或者冒充权利，==黑客大多采用== 旁路控制 利用安全缺陷 授权侵犯 内部攻击 特洛伊木马 察觉不出的程序段执行时，破坏用户安全 陷阱门 ==“机关”==、提供特定的输入数据时违反安全策略 抵赖 否认自己曾经发布的信息、伪造对方来信 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:49","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"防火墙技术 等级 优点 应用级 检查仔细 网络级 效率高 系统设计 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:50","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"结构化设计 主要包括: 体系结构设计:定义软件的主要结构元素及其关系。 数据设计:基于实体联系图确定软件涉及的文件系统的结构及数据库的表结构。 接口设计:描述用户界面,软件和其他硬件设备、其他软件系统及使用人员的外部接口,以及各种构件之间的内部接口。 过程设计:确定软件各个组成部分内的算法及内部数据结构,并选定某种过程的表达形式来描述各种算法。 自顶向下、逐步求精 信息隐蔽 模块独立（高内聚、低耦合、复杂度） 内聚 耦合 保持模块的大小适中 减少调用深度 多扇入，少扇出 单入口，单出口 模块的作用域应该在模块之内 功能应该是可预测的 系统结构/模块结构 软件测试 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:51","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"测试原则 尽早、不断的进行测试 程序员避免测试自己设计的程序 选择有效、合理的数据和无效、不合理的数据 修改后应回归测试 尚未发现的错误数量和已发现的错误数成正比 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:52","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"测试类型 动态测试 黑盒测试 边界值分析：选择边界值，任何时候后都需要使用 等价类划分：同一类中选择一个代表 错误推测：根据经验推测错误的地方 因果图：由果及因，反推 白盒测试 基本路径测试 循环覆盖测试 逻辑覆盖测试（按照覆盖全面由低到高） 语句覆盖：所有的语句都执行一遍 判定覆盖：判定的真假都走一遍 条件覆盖：判定中包含多条件，需要进行拆分 条件判定覆盖： 修正的条件判定覆盖 条件组合覆盖 点覆盖 边覆盖 路径覆盖：最高级别，所有路径都走了一遍 灰盒测试 静态测试 桌前检查：程序写完之后，自己测试 代码走查：非正式 代码审查：正式 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:53","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"测试阶段 单元测试（模块内） 模块接口 局部数据库结构 模块内路径 边界条件 错误处理 集成测试（模块之间） 一次性组装 增量式组装 确认测试 内部确认测试 Alpha测试：内部用户测试 Beta测试：实际用户测试 验收测试 系统测试 恢复测试 安全性测试 压力测试：极限值 性能测试 负载测试 强度测试 容量测试 可靠性测试 可用性测试 可维护性测试 安装测试 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:54","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"McCabe复杂度 系统运行与维护 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:55","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"可维护性 易分析性：代码规范 易改变性：耦合性强弱 稳定性 易测试性 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:56","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"维护类型 改正性维护：修复bug 适应性维护：适应环境，如操作系统环境，数据环境 完善性维护：扩充功能 预防性维护：将来可能出现的问题的维护 软件能力成熟度模型 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:57","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"阶段式–组织能力成熟度 混乱级（没有等级） 已管理级（项目级，==换一个项目就不行==） 已定义级（组织级、文档化、标准化） 定量管理级（量化） 优化级（持续优化） ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:58","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"连续式–软件过程能力 过程管理 项目管理 工程 支持 项目管理 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:59","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"最早开始时间（正推） 有多个分支选择最大的 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:60","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"最晚开始时间（逆推） 有多个分支选择最小的 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:61","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"风险管理 项目风险：关心未来 技术风险：关心变化 商业风险：关心选择 风险曝光度：风险出现概率 X 风险可能造成的损失 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:62","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"成本估算模型 COCOMO II模型 应用组装模型使用的是：对象点 早期设计阶段模型使用的是：功能点（功能点可以转换为代码行） 体系结构模型把工作量表示为：代码行数。 面向对象OOA ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:63","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"面向对象的分析 认定对象：将自然界的尸体确立为对象 组织对象：将对象抽象为类 描述对象的相互作用：如一个对象是另一个对象的一部分 确定对象的操作 定义对象的内部信息 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:64","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"面向对象的设计 识别类及对象 定义属性 定义服务 识别关系 识别包 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:65","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"基本概念 类、对象、接口 抽象、封装、继承、多态 消息、组件 模式、复用 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:66","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"设计原则 单一职责原则：设计目的单一的类 开放-封闭原则：对扩展开放、对修改封闭 里氏替换原则：子类可以替代父类，尽量不要重载 依赖倒置原则：依赖于抽象，而不是具体实现；针对接口编程，不要针对实现编程 接口隔离原则：多个专门的接口比单一的总接口更好 组合重用原则：尽量组合使用，而不是通过继承达到重用目的 迪米特原则：一个对象应当对其他对象有尽可能少的了解 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:67","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"UML 图 分类 实例 结构图（静态图） 类图、对象图、包图、组合结构图、构件图、部署图、制品图 行为图（动态图） 用例图、顺序图、通信图、定时图、状态图、活动图、交互概览图 ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:68","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["软考"],"content":"设计模式 概念 结构模式：软件设计中的高层决策，如C/S架构 设计模式：关注软件系统的设计，与实现语言无关 惯用法：最低层的模式，使用特定的实现语言实现构件之间关系，如引用-计数是c++的一种惯用法 创建型模式 ��式名称| ��明| ��象工厂模式| ��供一个接口，创建一系列相关的对象，无需指定具体的类| ��建器模式| ��的表示与其构造器分离| ��厂方法模式| ��义了一个创建对象的接口，由子类决定实例化哪一个类，使得子类实例化的过程推迟； ==类模式/对象模式==| ��型模式| ��过拷贝原型创建新的对象，而不是通过new，提高效率| ��例模式| ��个类只有一个实例，提供一个访问它的全局访问点| 结构型模式 ��式名称| ��明| ��键字| ��配器模式| ��个类的接口转换为另一个，使得原来不相容的接口协同工作 ==类模式/对象模式==| ��换接口| ��接模式| ��的抽象部分和实现部分分开，使其独立的变化| ��承树拆分| ��合模式| ��象组合成树型结构以表示“整体-部分”的层次结构，使得对单个对象和组合对象的使用具有一致性| ��形目录结构| ��饰模式| ��态地给一个对象添加一些额外的职责，比派生子类更加灵活| ��加职责| ��观模式| ��一个高层接口，给子系统中的一组接口提供一个一致的外观，简化子系统使用| ��外统一接口| ��元模式| ��供支持大量细粒度对象共享的有效方法| ��理模式| ��其他对象提供一种代理以控制这个对象的访问| 行为型模式 ��式名称| ��明| ��键字| ��责链模式| ��收者连成一个链，请求者发送请求，遇到的第一个可以处理的接收者进行处理，不再往下，避免请求者和多个接收者直接交互| ��递职责| ��令模式| ��请求封装为一个对象，可用不同的请求对客户参数化，将请求排队或记录请求日志| ��志记录、可撤销| ��释器模式| ��定一种语言，定义文法表示，定义解释器，根据文法来解释语言中的句子 ==类模式/对象模式==| ��代器模式| ��序访问一个聚合对象中的各个元素，不用暴露内部表示| ��介者模式| ��一个中介对象封装一系列的对象交互，不用显示相互调用，低耦合，还可以独立的改变对象间的交互| ��直接引用| ��忘录模式| ��破坏封装性的前提下，捕获一个对象的内部状态，在对象之外保存这个状态，之后可以将对象恢复到原先保存的状态| ��察者模式| ��象间的一种一对多的依赖关系，一个对象状态改变时，所有依赖于它的对象都得到通知并自动更新| ��态模式| ��许一个对象在其内部转态改变时改变它的行为| ��态变为类| ��略模式| ��义一系列算法，使得可以相互替换，让算法独立改变| ��方案切换| ��板方法模式| ��义个操作的算法骨架，将一些步骤延迟到子类中，使得子类不改变算法结构即可重新定义算法的某些特定步骤 ==类模式/对象模式==| ��问者模式| ��个作用于某对象结构中的各元素的操作，使得不改变各元素类的前提下定义作用于这些元素的新操作| ","date":"2023-10-15","objectID":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/:0:69","tags":null,"title":"软件设计师-选择题","uri":"/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E9%80%89%E6%8B%A9%E9%A2%98/"},{"categories":["linux"],"content":" 进入指定session，如dog screen -r dog 退出当前session 先按 ctrl+a 再按 ctrl+d ","date":"2023-06-09","objectID":"/screen/:0:0","tags":["screen"],"title":"screen","uri":"/screen/"},{"categories":["java"],"content":"[TOC] JavaFXSceneBuilder ","date":"2023-05-05","objectID":"/javafx/:0:0","tags":["javafx"],"title":"javafx","uri":"/javafx/"},{"categories":["java"],"content":"使用 下载 打包 在maven中引入依赖 \u003cdependencies\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.openjfx\u003c/groupId\u003e \u003cartifactId\u003ejavafx-controls\u003c/artifactId\u003e \u003cversion\u003e15.0.1\u003c/version\u003e \u003c/dependency\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.openjfx\u003c/groupId\u003e \u003cartifactId\u003ejavafx-fxml\u003c/artifactId\u003e \u003cversion\u003e15.0.1\u003c/version\u003e \u003c/dependency\u003e \u003c/dependencies\u003e 打包成exe， 创建一个类文件来调用xxApplication mainClass中指定这个类的名称 配置插件 \u003cbuild\u003e \u003cplugins\u003e \u003cplugin\u003e \u003cgroupId\u003eio.github.fvarrui\u003c/groupId\u003e \u003cartifactId\u003ejavapackager\u003c/artifactId\u003e \u003cversion\u003e1.6.6\u003c/version\u003e \u003cexecutions\u003e \u003cexecution\u003e \u003cphase\u003epackage\u003c/phase\u003e \u003cgoals\u003e \u003cgoal\u003epackage\u003c/goal\u003e \u003c/goals\u003e \u003cconfiguration\u003e \u003c!-- 启动类 --\u003e \u003cmainClass\u003esample.TimeGuardian\u003c/mainClass\u003e \u003c!-- 绑定自定义JRE路径--\u003e \u003cbundleJre\u003etrue\u003c/bundleJre\u003e \u003cjrePath\u003eE:\\java\\jre\u003c/jrePath\u003e \u003cgenerateInstaller\u003etrue\u003c/generateInstaller\u003e \u003cadministratorRequired\u003efalse\u003c/administratorRequired\u003e \u003c!-- 操作系统--\u003e \u003cplatform\u003ewindows\u003c/platform\u003e \u003ccopyDependencies\u003etrue\u003c/copyDependencies\u003e \u003c!-- 名称与版本--\u003e \u003cdisplayName\u003eTimeGuardian\u003c/displayName\u003e \u003cname\u003eTimeGuardian\u003c/name\u003e \u003cversion\u003e1.0\u003c/version\u003e \u003c!-- 手动引入额外资源--\u003e \u003cadditionalResources\u003e--\u003e \u003cadditionalResource\u003eD:\\Item\\GD_AmtHardwareTest1.0\\datas\u003c/additionalResource\u003e \u003cadditionalResource\u003eD:\\Item\\GD_AmtHardwareTest1.0\\lib\u003c/additionalResource\u003e \u003c/additionalResources\u003e--\u003e \u003c!--详细参数配置--\u003e \u003cwinConfig\u003e \u003cicoFile\u003eE:\\Scipt\\ahk\\In-Time-Zone-Guardian\\TimeGuardian.ico\u003c/icoFile\u003e \u003cgenerateSetup\u003efalse\u003c/generateSetup\u003e \u003cgenerateMsi\u003efalse\u003c/generateMsi\u003e \u003cgenerateMsm\u003efalse\u003c/generateMsm\u003e \u003c/winConfig\u003e \u003c/configuration\u003e \u003c/execution\u003e \u003c/executions\u003e \u003c/plugin\u003e \u003c/plugins\u003e \u003c/build\u003e 右侧maven工具进行clean、package fxml ","date":"2023-05-05","objectID":"/javafx/:0:1","tags":["javafx"],"title":"javafx","uri":"/javafx/"},{"categories":["java"],"content":"TextField 文本域值改变监听事件 textField.textProperty().addListener(new ChangeListener(){ @Override public void changed(ObservableValue observable, Object oldValue, Object newValue) { StartController.workTime = Integer.parseInt(workTextField.getText()) * 1; } }); controller ","date":"2023-05-05","objectID":"/javafx/:0:2","tags":["javafx"],"title":"javafx","uri":"/javafx/"},{"categories":["java"],"content":"线程 ui线程 处理界面的变化 自定义线程 需要更新界面时，需要使用代码 Platform.runLater(() -\u003e { // 更新ui的代码 }); ","date":"2023-05-05","objectID":"/javafx/:0:3","tags":["javafx"],"title":"javafx","uri":"/javafx/"},{"categories":["java"],"content":"元素 stage 设置全屏 workStage.setFullScreen(true); workStage.setFullScreenExitHint(\"\");//去除全屏的提示文字 透明、没有装饰 workStage.initStyle(StageStyle.TRANSPARENT); 置顶 workStage.setAlwaysOnTop(true); scene 透明 workScene.setFill(null); 半透明，使用rgba设置背景颜色 style = \"-fx-background-color: rgba(255,255,255,0.5);\" 背景颜色 workPane.setBackground(new Background(new BackgroundFill(new Color(0.65,0.23,0,0.86), null, null))); ","date":"2023-05-05","objectID":"/javafx/:0:4","tags":["javafx"],"title":"javafx","uri":"/javafx/"},{"categories":["java"],"content":"快捷键 重置时间 KeyCombination altb=new KeyCodeCombination(KeyCode.B,KeyCombination.ALT_DOWN); workScene.getAccelerators().put(altb,new Runnable(){ public void run(){ if(Main.status == 1){ time = workTime; } } }); 注意 ","date":"2023-05-05","objectID":"/javafx/:0:5","tags":["javafx"],"title":"javafx","uri":"/javafx/"},{"categories":["java"],"content":"内存泄漏 及时移除监听器 ","date":"2023-05-05","objectID":"/javafx/:0:6","tags":["javafx"],"title":"javafx","uri":"/javafx/"},{"categories":["部署"],"content":"[toc] 安装mysql 将下载好的mysql上传到服务器 将mysql的tar.gz文件上传到服务器/home/software文件夹下 tar -zxvf mysql-5.7.40-el7-x86_64.tar.gz 解压 mv mysql-5.7.40-el7-x86_64 mysql 重命名 检查是否安装了mysql和mariadb rpm -qa | grep mysql rpm -qa | grep mariadb 如果存在，卸载mariadb rpm -e --nodeps mariadb-libs-5.5.68-1.el7.x86_64 安装需要的依赖包 yum -y install libaio 创建MySQL安装目录和数据存放目录，并授权 mkdir /usr/local/mysql mv mysql /usr/local/mysql mkdir /usr/local/mysql/mysqldb chmod -R 777 /usr/local/mysql chmod -R 777 /usr/local/mysql/mysqldb/ 创建MySQL组：创建MySQL用户，并设置密码。 groupadd mysql useradd mysql -g mysql passwd mysql 密码 将mysql目录的权限授给mysql用户和mysql组 chown -R mysql:mysql /usr/local/mysql 创建MySQL的安装初始化配置文件 vim /etc/my.cnf 配置文件 填入以下内容 [mysqld] # 设置3307端口 port=3307 # 设置mysql的安装目录 basedir=/usr/local/mysql/mysql # 设置mysql数据库的数据的存放目录 datadir=/usr/local/mysql/mysqldb # 设置group_concat最大数值 group_concat_max_len = 2000000 # 允许最大连接数 max_connections=10000 # 允许连接失败的次数。这是为了防止有人从该主机试图攻击数据库系统 max_connect_errors=10 # 服务端使用的字符集默认为UTF8 character-set-server=utf8 # 创建新表时将使用的默认存储引擎 default-storage-engine=INNODB # 默认使用“mysql_native_password”插件认证 default_authentication_plugin=mysql_native_password [mysql] # 设置mysql客户端默认字符集 default-character-set=utf8 [client] # 设置mysql客户端连接服务端时默认使用的端口 port=3307 default-character-set=utf8 安装mysql cd /usr/local/mysql/mysql/bin/ ./mysqld –initialize –console 记录默认生成的mysql密码 例如：NFhGPyp2EW%f ==如果 error while loading shared libraries: libnuma.so.1:== yum remove libnuma.so.1 卸载32位的 yum -y install numactl.x86_64 安装64位的 启动mysql cd ../support-files/ ==修改mysql.server中conf位置为自己的my.cnf存在的位置== yum -y install vim vim mysql.server 启动 ./mysql.server start ==出错的话在执行一次授权== chmod -R 777 /usr/local/mysql chmod -R 777 /usr/local/mysql/mysqldb/ 将MySQL加入系统进程中 cp mysql.server /etc/init.d/mysqld service mysqld restart 重启mysql服务 如果没有service命令，执行以下命令列出initscripts，并安装 yum list | grep initscripts yum -y install initscripts systemctl enable mysqld 开机自启 修改mysql密码 cd ../bin/ ./mysql -u root -p 输入默认生成的mysql密码 ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '密码'; 设置远程登录 use mysql; update user set host='%' where user='root'; flush privileges; 退出MySQL 并重启服务 exit service mysqld restart 删除已经安装的yum包 yum -y remove vim numactl.x86_64 mysql的http插件扩展 将mysql-udf-http的tar.gz文件上传到服务器/home/software文件夹下，并进入文件夹 tar -zxvf mysql-udf-http-1.0.tar.gz cd mysql-udf-http-1.0 配置 ./configure --prefix=/usr/local/mysql/mysql --with-mysql=/usr/local/mysql/mysql/bin/mysql_config 参数 prefix=“mysql安装路径” with-mysql=“mysql_config所在路径” 提示no acceptable C compiler yum -y install gcc-c++ 提示No package ’libcurl' yum -y install libcurl-devel.x86_64 安装依赖包 yum -y install automake autoconf libtool make 编译并安装 make \u0026 make install 安装好的插件在这里，需要进行移动到plugin目录下，否则加载不到无法创建函数 cd /usr/local/mysql/mysql/lib mv mysql-udf-http.* plugin/ 在navicat中远程连接数据库，新建查询执行下面命令添加函数 create function http_get returns string soname 'mysql-udf-http.so'; create function http_post returns string soname 'mysql-udf-http.so'; create function http_put returns string soname 'mysql-udf-http.so'; create function http_delete returns string soname 'mysql-udf-http.so'; 在navicat检查是否安装成功， SELECT http_get('http://m.baidu.com/s?word=xoyo\u0026pn=0'); 如果有返回值则成功 具体用法见这里 删除已经安装的yum包 yum -y remove gcc-c++ libcurl-devel.x86_64 automake autoconf libtool make 定时任务 查看状态 show variables like 'event_scheduler'; 如果显示为off，执行如下 set global event_scheduler = on; 注意：服务器重启或者mysql重启会失效，建议修改配置文件加上下面的配置 event_scheduler=ON Q\u0026A max_allowed_packet太小 进入mysql控制台 set global max_allowed_packet = 1024*1024*16; ","date":"2023-04-16","objectID":"/mysql/:0:0","tags":["linux","mysql"],"title":"mysql","uri":"/mysql/"}]